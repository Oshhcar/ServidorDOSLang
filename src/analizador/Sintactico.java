
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import analizador.ast.*;
import analizador.ast.entorno.Tipo;
import analizador.ast.entorno.Type;
import analizador.ast.expresion.*;
import analizador.ast.instruccion.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\005\000\002\005\005\000\002\005\002" +
    "\000\002\006\005\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\004\000\002\010" +
    "\002\000\002\011\004\000\002\011\003\000\002\012\006" +
    "\000\002\013\003\000\002\013\005\000\002\013\005\000" +
    "\002\014\003\000\002\014\010\000\002\014\003\000\002" +
    "\014\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\003\000\002\017\004\000\002\017\002" +
    "\000\002\020\004\000\002\020\003\000\002\021\006\000" +
    "\002\021\010\000\002\022\004\000\002\022\002\000\002" +
    "\023\004\000\002\023\003\000\002\024\006\000\002\025" +
    "\002\000\002\025\003\000\002\026\004\000\002\026\003" +
    "\000\002\027\004\000\002\027\003\000\002\027\004\000" +
    "\002\027\003\000\002\030\013\000\002\031\005\000\002" +
    "\031\002\000\002\032\005\000\002\032\003\000\002\033" +
    "\005\000\002\033\006\000\002\034\011\000\002\035\005" +
    "\000\002\035\004\000\002\040\004\000\002\040\003\000" +
    "\002\040\003\000\002\036\004\000\002\036\003\000\002" +
    "\037\004\000\002\037\003\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\004\000\002\037\003\000" +
    "\002\037\004\000\002\037\003\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\041\007\000\002\041" +
    "\006\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\042\005\000\002\044\003\000\002\045\003\000" +
    "\002\046\003\000\002\047\010\000\002\047\006\000\002" +
    "\050\011\000\002\050\007\000\002\051\004\000\002\051" +
    "\003\000\002\052\005\000\002\053\006\000\002\054\006" +
    "\000\002\055\012\000\002\055\012\000\002\056\006\000" +
    "\002\056\006\000\002\057\006\000\002\060\003\000\002" +
    "\060\003\000\002\061\005\000\002\061\003\000\002\062" +
    "\003\000\002\063\003\000\002\063\005\000\002\065\003" +
    "\000\002\065\005\000\002\065\005\000\002\064\003\000" +
    "\002\064\005\000\002\066\003\000\002\066\005\000\002" +
    "\066\005\000\002\067\003\000\002\067\005\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\071\003\000\002\071\005\000\002\071\005\000" +
    "\002\072\003\000\002\072\005\000\002\072\005\000\002" +
    "\072\005\000\002\072\005\000\002\073\003\000\002\073" +
    "\004\000\002\073\004\000\002\073\004\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\100\005\000\002\101\005\000" +
    "\002\102\006\000\002\103\005\000\002\103\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\054\004\031\005\060\006\032\007\057\010" +
    "\041\011\045\012\027\013\010\021\033\072\043\073\030" +
    "\076\011\100\054\101\036\102\024\104\034\105\006\107" +
    "\047\112\055\113\005\114\022\001\002\000\004\014\271" +
    "\001\002\000\004\021\266\001\002\000\054\004\031\005" +
    "\060\006\032\007\057\010\041\011\045\012\027\013\010" +
    "\021\033\072\043\073\030\076\011\100\054\101\036\102" +
    "\024\104\034\105\006\107\047\112\055\113\005\114\022" +
    "\001\002\000\004\014\262\001\002\000\072\014\uff6d\015" +
    "\uff6d\020\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\027\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d" +
    "\045\uff6d\046\uff6d\062\uff6d\074\uff6d\077\uff6d\110\uff6d\111" +
    "\uff6d\001\002\000\004\010\253\001\002\000\062\002\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\021\uffc2\067\uffc2\072\uffc2\073\uffc2\076\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\104\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\112\uffc2\113\uffc2\114\uffc2\001\002\000\056\002\000" +
    "\004\031\005\060\006\032\007\057\010\041\011\045\012" +
    "\027\013\010\021\033\072\043\073\030\076\011\100\054" +
    "\101\036\102\024\104\034\105\006\107\047\112\055\113" +
    "\005\114\022\001\002\000\004\014\251\001\002\000\074" +
    "\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\021\uffb6\030\uffb6\031\uffb6\047\uffb6" +
    "\067\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\112\uffb6\113\uffb6\114\uffb6\001\002\000\072\014\uff7a\015" +
    "\uff7a\020\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\027\uff7a" +
    "\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\062\uff7a\074\uff7a\077\uff7a\110\uff7a\111" +
    "\uff7a\001\002\000\010\014\uff9b\023\uff77\027\uff77\001\002" +
    "\000\072\014\uff6c\015\uff6c\020\uff6c\022\uff6c\023\uff6c\024" +
    "\uff6c\025\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c" +
    "\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042" +
    "\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\062\uff6c\074\uff6c" +
    "\077\uff6c\110\uff6c\111\uff6c\001\002\000\004\014\250\001" +
    "\002\000\004\021\245\001\002\000\010\023\uff79\026\uffaf" +
    "\027\uff79\001\002\000\032\004\031\005\060\006\032\007" +
    "\057\010\076\011\045\012\027\013\010\021\033\030\103" +
    "\031\075\047\066\001\002\000\004\014\230\001\002\000" +
    "\076\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\227\021\uffc0\030\uffc0\031" +
    "\uffc0\047\uffc0\067\uffc0\072\uffc0\073\uffc0\075\uffc0\076\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\112\uffc0\113\uffc0\114\uffc0\001\002\000\072" +
    "\014\uff6e\015\uff6e\020\uff6e\022\uff6e\023\uff6e\024\uff6e\025" +
    "\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e" +
    "\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\062\uff6e\074\uff6e\077\uff6e" +
    "\110\uff6e\111\uff6e\001\002\000\032\004\031\005\060\006" +
    "\032\007\057\010\076\011\045\012\027\013\010\021\033" +
    "\030\103\031\075\047\066\001\002\000\072\014\uff73\015" +
    "\uff73\020\uff73\022\uff73\023\uff73\024\uff73\025\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\045\uff73\046\uff73\062\uff73\074\uff73\077\uff73\110\uff73\111" +
    "\uff73\001\002\000\072\014\uff71\015\uff71\020\uff71\022\uff71" +
    "\023\uff71\024\uff71\025\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\062" +
    "\uff71\074\uff71\077\uff71\110\uff71\111\uff71\001\002\000\032" +
    "\004\031\005\060\006\032\007\057\010\076\011\045\012" +
    "\027\013\010\021\033\030\103\031\075\047\066\001\002" +
    "\000\032\004\031\005\060\006\032\007\057\010\076\011" +
    "\045\012\027\013\010\021\033\030\103\031\075\047\066" +
    "\001\002\000\074\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\021\uffb8\030\uffb8" +
    "\031\uffb8\047\uffb8\067\uffb8\072\uffb8\073\uffb8\075\uffb8\076" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\106\uffb8\107\uffb8\112\uffb8\113\uffb8\114\uffb8\001\002\000" +
    "\004\014\uffaa\001\002\000\004\026\213\001\002\000\074" +
    "\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\021\uffbb\030\uffbb\031\uffbb\047\uffbb" +
    "\067\uffbb\072\uffbb\073\uffbb\075\uffbb\076\uffbb\100\uffbb\101" +
    "\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb" +
    "\112\uffbb\113\uffbb\114\uffbb\001\002\000\014\014\uff9a\021" +
    "\145\023\uff76\026\uffb0\027\uff76\001\002\000\072\014\uff75" +
    "\015\uff75\020\uff75\022\uff75\023\uff75\024\uff75\025\uff75\027" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044" +
    "\uff75\045\uff75\046\uff75\062\uff75\074\uff75\077\uff75\110\uff75" +
    "\111\uff75\001\002\000\004\014\uffac\001\002\000\010\023" +
    "\uff78\026\uffae\027\uff78\001\002\000\072\014\uff6f\015\uff6f" +
    "\020\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f" +
    "\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\062\uff6f\074\uff6f\077\uff6f\110\uff6f\111\uff6f" +
    "\001\002\000\076\002\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\212\021\uffba" +
    "\030\uffba\031\uffba\047\uffba\067\uffba\072\uffba\073\uffba\075" +
    "\uffba\076\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba" +
    "\105\uffba\106\uffba\107\uffba\112\uffba\113\uffba\114\uffba\001" +
    "\002\000\024\004\031\005\060\006\032\007\057\010\167" +
    "\011\045\012\027\013\010\021\033\001\002\000\004\014" +
    "\165\001\002\000\004\014\164\001\002\000\004\002\163" +
    "\001\002\000\004\014\162\001\002\000\004\014\uffab\001" +
    "\002\000\004\021\157\001\002\000\006\023\063\027\062" +
    "\001\002\000\072\014\uff70\015\uff70\020\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\027\uff70\030\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\062\uff70" +
    "\074\uff70\077\uff70\110\uff70\111\uff70\001\002\000\072\014" +
    "\uff72\015\uff72\020\uff72\022\uff72\023\uff72\024\uff72\025\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\062\uff72\074\uff72\077\uff72\110" +
    "\uff72\111\uff72\001\002\000\072\014\uff74\015\uff74\020\uff74" +
    "\022\uff74\023\uff74\024\uff74\025\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046" +
    "\uff74\062\uff74\074\uff74\077\uff74\110\uff74\111\uff74\001\002" +
    "\000\004\010\156\001\002\000\032\004\031\005\060\006" +
    "\032\007\057\010\076\011\045\012\027\013\010\021\033" +
    "\030\103\031\075\047\066\001\002\000\052\014\uff8f\015" +
    "\uff8f\020\uff8f\022\uff8f\024\uff8f\025\uff8f\036\123\037\122" +
    "\040\120\041\121\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\062\uff8f\074\uff8f\077\uff8f\110\uff8f\111\uff8f\001\002" +
    "\000\006\015\151\024\155\001\002\000\024\004\031\005" +
    "\060\006\032\007\057\010\076\011\045\012\027\013\010" +
    "\021\033\001\002\000\036\014\uff94\015\uff94\022\uff94\024" +
    "\uff94\025\uff94\043\113\044\uff94\045\uff94\046\uff94\062\uff94" +
    "\074\uff94\077\uff94\110\uff94\111\uff94\001\002\000\072\014" +
    "\uff77\015\uff77\020\uff77\022\uff77\023\uff77\024\uff77\025\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\045\uff77\046\uff77\062\uff77\074\uff77\077\uff77\110" +
    "\uff77\111\uff77\001\002\000\072\014\uff78\015\uff78\020\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\027\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\062\uff78\074\uff78\077\uff78\110\uff78\111\uff78\001\002" +
    "\000\066\014\uff86\015\uff86\020\uff86\022\uff86\024\uff86\025" +
    "\uff86\030\uff86\031\uff86\032\132\033\133\034\134\035\131" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\062\uff86\074\uff86\077\uff86\110\uff86" +
    "\111\uff86\001\002\000\066\014\uff83\015\uff83\020\uff83\022" +
    "\uff83\024\uff83\025\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042" +
    "\uff83\043\uff83\044\uff83\045\uff83\046\uff83\062\uff83\074\uff83" +
    "\077\uff83\110\uff83\111\uff83\001\002\000\056\014\uff8c\015" +
    "\uff8c\020\uff8c\022\uff8c\024\uff8c\025\uff8c\030\126\031\127" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\062\uff8c\074\uff8c\077\uff8c\110\uff8c" +
    "\111\uff8c\001\002\000\024\004\031\005\060\006\032\007" +
    "\057\010\076\011\045\012\027\013\010\021\033\001\002" +
    "\000\074\014\uff76\015\uff76\020\uff76\021\145\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\062\uff76" +
    "\074\uff76\077\uff76\110\uff76\111\uff76\001\002\000\042\014" +
    "\uff91\015\uff91\020\115\022\uff91\024\uff91\025\uff91\042\116" +
    "\043\uff91\044\uff91\045\uff91\046\uff91\062\uff91\074\uff91\077" +
    "\uff91\110\uff91\111\uff91\001\002\000\012\015\uff98\022\uff98" +
    "\024\uff98\025\uff98\001\002\000\072\014\uff7e\015\uff7e\020" +
    "\uff7e\022\uff7e\023\063\024\uff7e\025\uff7e\027\062\030\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\062\uff7e\074\uff7e\077\uff7e\110\uff7e\111\uff7e\001" +
    "\002\000\034\014\uff96\015\uff96\022\uff96\024\uff96\025\uff96" +
    "\044\110\045\111\046\uff96\062\uff96\074\uff96\077\uff96\110" +
    "\uff96\111\uff96\001\002\000\024\004\031\005\060\006\032" +
    "\007\057\010\076\011\045\012\027\013\010\021\033\001" +
    "\002\000\030\014\uff97\015\uff97\022\uff97\024\uff97\025\uff97" +
    "\046\106\062\uff97\074\uff97\077\uff97\110\uff97\111\uff97\001" +
    "\002\000\072\014\uff79\015\uff79\020\uff79\022\uff79\023\uff79" +
    "\024\uff79\025\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033" +
    "\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79" +
    "\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\062\uff79\074" +
    "\uff79\077\uff79\110\uff79\111\uff79\001\002\000\032\004\031" +
    "\005\060\006\032\007\057\010\076\011\045\012\027\013" +
    "\010\021\033\030\103\031\075\047\066\001\002\000\034" +
    "\014\uff95\015\uff95\022\uff95\024\uff95\025\uff95\044\110\045" +
    "\111\046\uff95\062\uff95\074\uff95\077\uff95\110\uff95\111\uff95" +
    "\001\002\000\032\004\031\005\060\006\032\007\057\010" +
    "\076\011\045\012\027\013\010\021\033\030\103\031\075" +
    "\047\066\001\002\000\032\004\031\005\060\006\032\007" +
    "\057\010\076\011\045\012\027\013\010\021\033\030\103" +
    "\031\075\047\066\001\002\000\036\014\uff92\015\uff92\022" +
    "\uff92\024\uff92\025\uff92\043\113\044\uff92\045\uff92\046\uff92" +
    "\062\uff92\074\uff92\077\uff92\110\uff92\111\uff92\001\002\000" +
    "\032\004\031\005\060\006\032\007\057\010\076\011\045" +
    "\012\027\013\010\021\033\030\103\031\075\047\066\001" +
    "\002\000\042\014\uff90\015\uff90\020\115\022\uff90\024\uff90" +
    "\025\uff90\042\116\043\uff90\044\uff90\045\uff90\046\uff90\062" +
    "\uff90\074\uff90\077\uff90\110\uff90\111\uff90\001\002\000\032" +
    "\004\031\005\060\006\032\007\057\010\076\011\045\012" +
    "\027\013\010\021\033\030\103\031\075\047\066\001\002" +
    "\000\032\004\031\005\060\006\032\007\057\010\076\011" +
    "\045\012\027\013\010\021\033\030\103\031\075\047\066" +
    "\001\002\000\052\014\uff8d\015\uff8d\020\uff8d\022\uff8d\024" +
    "\uff8d\025\uff8d\036\123\037\122\040\120\041\121\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\062\uff8d\074\uff8d\077" +
    "\uff8d\110\uff8d\111\uff8d\001\002\000\032\004\uff88\005\uff88" +
    "\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\021" +
    "\uff88\030\uff88\031\uff88\047\uff88\001\002\000\032\004\uff87" +
    "\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013" +
    "\uff87\021\uff87\030\uff87\031\uff87\047\uff87\001\002\000\032" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\021\uff89\030\uff89\031\uff89\047\uff89\001\002" +
    "\000\032\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\021\uff8a\030\uff8a\031\uff8a\047\uff8a" +
    "\001\002\000\032\004\031\005\060\006\032\007\057\010" +
    "\076\011\045\012\027\013\010\021\033\030\103\031\075" +
    "\047\066\001\002\000\056\014\uff8b\015\uff8b\020\uff8b\022" +
    "\uff8b\024\uff8b\025\uff8b\030\126\031\127\036\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\062\uff8b\074\uff8b\077\uff8b\110\uff8b\111\uff8b\001\002" +
    "\000\032\004\031\005\060\006\032\007\057\010\076\011" +
    "\045\012\027\013\010\021\033\030\103\031\075\047\066" +
    "\001\002\000\032\004\031\005\060\006\032\007\057\010" +
    "\076\011\045\012\027\013\010\021\033\030\103\031\075" +
    "\047\066\001\002\000\066\014\uff84\015\uff84\020\uff84\022" +
    "\uff84\024\uff84\025\uff84\030\uff84\031\uff84\032\132\033\133" +
    "\034\134\035\131\036\uff84\037\uff84\040\uff84\041\uff84\042" +
    "\uff84\043\uff84\044\uff84\045\uff84\046\uff84\062\uff84\074\uff84" +
    "\077\uff84\110\uff84\111\uff84\001\002\000\032\004\031\005" +
    "\060\006\032\007\057\010\076\011\045\012\027\013\010" +
    "\021\033\030\103\031\075\047\066\001\002\000\032\004" +
    "\031\005\060\006\032\007\057\010\076\011\045\012\027" +
    "\013\010\021\033\030\103\031\075\047\066\001\002\000" +
    "\032\004\031\005\060\006\032\007\057\010\076\011\045" +
    "\012\027\013\010\021\033\030\103\031\075\047\066\001" +
    "\002\000\032\004\031\005\060\006\032\007\057\010\076" +
    "\011\045\012\027\013\010\021\033\030\103\031\075\047" +
    "\066\001\002\000\066\014\uff7f\015\uff7f\020\uff7f\022\uff7f" +
    "\024\uff7f\025\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\062\uff7f\074\uff7f\077" +
    "\uff7f\110\uff7f\111\uff7f\001\002\000\066\014\uff81\015\uff81" +
    "\020\uff81\022\uff81\024\uff81\025\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\062" +
    "\uff81\074\uff81\077\uff81\110\uff81\111\uff81\001\002\000\066" +
    "\014\uff82\015\uff82\020\uff82\022\uff82\024\uff82\025\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\062\uff82\074\uff82\077\uff82\110\uff82\111\uff82" +
    "\001\002\000\066\014\uff80\015\uff80\020\uff80\022\uff80\024" +
    "\uff80\025\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\062\uff80\074\uff80\077\uff80" +
    "\110\uff80\111\uff80\001\002\000\066\014\uff85\015\uff85\020" +
    "\uff85\022\uff85\024\uff85\025\uff85\030\uff85\031\uff85\032\132" +
    "\033\133\034\134\035\131\036\uff85\037\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\062\uff85" +
    "\074\uff85\077\uff85\110\uff85\111\uff85\001\002\000\052\014" +
    "\uff8e\015\uff8e\020\uff8e\022\uff8e\024\uff8e\025\uff8e\036\123" +
    "\037\122\040\120\041\121\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\062\uff8e\074\uff8e\077\uff8e\110\uff8e\111\uff8e" +
    "\001\002\000\036\014\uff93\015\uff93\022\uff93\024\uff93\025" +
    "\uff93\043\113\044\uff93\045\uff93\046\uff93\062\uff93\074\uff93" +
    "\077\uff93\110\uff93\111\uff93\001\002\000\072\014\uff7d\015" +
    "\uff7d\020\uff7d\022\uff7d\023\063\024\uff7d\025\uff7d\027\062" +
    "\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\062\uff7d\074\uff7d\077\uff7d\110\uff7d\111" +
    "\uff7d\001\002\000\034\004\031\005\060\006\032\007\057" +
    "\010\076\011\045\012\027\013\010\021\033\022\147\030" +
    "\103\031\075\047\066\001\002\000\006\015\151\022\150" +
    "\001\002\000\072\014\uff68\015\uff68\020\uff68\022\uff68\023" +
    "\uff68\024\uff68\025\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\062\uff68" +
    "\074\uff68\077\uff68\110\uff68\111\uff68\001\002\000\072\014" +
    "\uff67\015\uff67\020\uff67\022\uff67\023\uff67\024\uff67\025\uff67" +
    "\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035" +
    "\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67" +
    "\044\uff67\045\uff67\046\uff67\062\uff67\074\uff67\077\uff67\110" +
    "\uff67\111\uff67\001\002\000\032\004\031\005\060\006\032" +
    "\007\057\010\076\011\045\012\027\013\010\021\033\030" +
    "\103\031\075\047\066\001\002\000\012\015\uff99\022\uff99" +
    "\024\uff99\025\uff99\001\002\000\072\014\uff7c\015\uff7c\020" +
    "\uff7c\022\uff7c\023\063\024\uff7c\025\uff7c\027\062\030\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c" +
    "\046\uff7c\062\uff7c\074\uff7c\077\uff7c\110\uff7c\111\uff7c\001" +
    "\002\000\072\014\uff7b\015\uff7b\020\uff7b\022\uff7b\023\063" +
    "\024\uff7b\025\uff7b\027\062\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\062\uff7b\074" +
    "\uff7b\077\uff7b\110\uff7b\111\uff7b\001\002\000\074\014\uff69" +
    "\015\uff69\020\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026" +
    "\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69" +
    "\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043" +
    "\uff69\044\uff69\045\uff69\046\uff69\062\uff69\074\uff69\077\uff69" +
    "\110\uff69\111\uff69\001\002\000\074\014\uff6a\015\uff6a\020" +
    "\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036" +
    "\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a" +
    "\045\uff6a\046\uff6a\062\uff6a\074\uff6a\077\uff6a\110\uff6a\111" +
    "\uff6a\001\002\000\032\004\031\005\060\006\032\007\057" +
    "\010\076\011\045\012\027\013\010\021\033\030\103\031" +
    "\075\047\066\001\002\000\006\015\151\022\161\001\002" +
    "\000\004\014\uff9e\001\002\000\074\002\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\021\uffb4\030\uffb4\031\uffb4\047\uffb4\067\uffb4\072\uffb4\073" +
    "\uffb4\075\uffb4\076\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\112\uffb4\113\uffb4\114" +
    "\uffb4\001\002\000\004\002\001\001\002\000\074\002\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\021\uffb3\030\uffb3\031\uffb3\047\uffb3\067\uffb3" +
    "\072\uffb3\073\uffb3\075\uffb3\076\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\112\uffb3" +
    "\113\uffb3\114\uffb3\001\002\000\074\002\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\021\uffb5\030\uffb5\031\uffb5\047\uffb5\067\uffb5\072\uffb5\073" +
    "\uffb5\075\uffb5\076\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\104\uffb5\105\uffb5\106\uffb5\107\uffb5\112\uffb5\113\uffb5\114" +
    "\uffb5\001\002\000\004\026\170\001\002\000\012\021\145" +
    "\023\uff76\026\uffb0\027\uff76\001\002\000\032\004\031\005" +
    "\060\006\032\007\057\010\076\011\045\012\027\013\010" +
    "\021\033\030\103\031\075\047\066\001\002\000\006\110" +
    "\172\111\173\001\002\000\032\004\031\005\060\006\032" +
    "\007\057\010\076\011\045\012\027\013\010\021\033\030" +
    "\103\031\075\047\066\001\002\000\032\004\031\005\060" +
    "\006\032\007\057\010\076\011\045\012\027\013\010\021" +
    "\033\030\103\031\075\047\066\001\002\000\004\077\175" +
    "\001\002\000\056\004\031\005\060\006\032\007\057\010" +
    "\041\011\045\012\027\013\010\021\033\066\176\072\043" +
    "\073\030\076\011\100\054\101\036\102\024\104\034\105" +
    "\006\107\047\112\055\113\005\114\022\001\002\000\056" +
    "\004\031\005\060\006\032\007\057\010\041\011\045\012" +
    "\027\013\010\021\033\067\203\072\043\073\030\076\011" +
    "\100\054\101\036\102\024\104\034\105\006\107\047\112" +
    "\055\113\005\114\022\001\002\000\074\002\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\021\uffc4\030\uffc4\031\uffc4\047\uffc4\067\uffc4\072\uffc4" +
    "\073\uffc4\075\uffc4\076\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\112\uffc4\113\uffc4" +
    "\114\uffc4\001\002\000\076\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\202" +
    "\021\uffc5\030\uffc5\031\uffc5\047\uffc5\067\uffc5\072\uffc5\073" +
    "\uffc5\075\uffc5\076\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\105\uffc5\106\uffc5\107\uffc5\112\uffc5\113\uffc5\114" +
    "\uffc5\001\002\000\074\002\uff9f\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\021\uff9f\030" +
    "\uff9f\031\uff9f\047\uff9f\067\uff9f\072\uff9f\073\uff9f\075\uff9f" +
    "\076\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105" +
    "\uff9f\106\uff9f\107\uff9f\112\uff9f\113\uff9f\114\uff9f\001\002" +
    "\000\074\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\021\uffc6\030\uffc6\031\uffc6" +
    "\047\uffc6\067\uffc6\072\uffc6\073\uffc6\075\uffc6\076\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6" +
    "\107\uffc6\112\uffc6\113\uffc6\114\uffc6\001\002\000\076\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\021\uffc7\030\uffc7\031\uffc7\047" +
    "\uffc7\067\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\001\002\000\056\004\031" +
    "\005\060\006\032\007\057\010\041\011\045\012\027\013" +
    "\010\021\033\067\205\072\043\073\030\076\011\100\054" +
    "\101\036\102\024\104\034\105\006\107\047\112\055\113" +
    "\005\114\022\001\002\000\076\002\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\021\uffc8\030\uffc8\031\uffc8\047\uffc8\067\uffc8\072\uffc8" +
    "\073\uffc8\075\uffc8\076\uffc8\100\uffc8\101\uffc8\102\uffc8\103" +
    "\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\112\uffc8\113\uffc8" +
    "\114\uffc8\001\002\000\062\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\021\uffc3" +
    "\067\uffc3\072\uffc3\073\uffc3\076\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\112\uffc3\113\uffc3" +
    "\114\uffc3\001\002\000\004\077\210\001\002\000\056\004" +
    "\031\005\060\006\032\007\057\010\041\011\045\012\027" +
    "\013\010\021\033\066\176\072\043\073\030\076\011\100" +
    "\054\101\036\102\024\104\034\105\006\107\047\112\055" +
    "\113\005\114\022\001\002\000\074\002\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\021\uffa0\030\uffa0\031\uffa0\047\uffa0\067\uffa0\072\uffa0\073" +
    "\uffa0\075\uffa0\076\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\107\uffa0\112\uffa0\113\uffa0\114" +
    "\uffa0\001\002\000\074\002\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\021\uffb9\030" +
    "\uffb9\031\uffb9\047\uffb9\067\uffb9\072\uffb9\073\uffb9\075\uffb9" +
    "\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\112\uffb9\113\uffb9\114\uffb9\001\002" +
    "\000\032\004\031\005\060\006\032\007\057\010\076\011" +
    "\045\012\027\013\010\021\033\030\103\031\075\047\066" +
    "\001\002\000\004\014\uffad\001\002\000\004\077\216\001" +
    "\002\000\056\004\031\005\060\006\032\007\057\010\041" +
    "\011\045\012\027\013\010\021\033\066\176\072\043\073" +
    "\030\076\011\100\054\101\036\102\024\104\034\105\006" +
    "\107\047\112\055\113\005\114\022\001\002\000\074\002" +
    "\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\021\uffa2\030\uffa2\031\uffa2\047\uffa2\067" +
    "\uffa2\072\uffa2\073\uffa2\075\uffa2\076\uffa2\100\uffa2\101\uffa2" +
    "\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\112" +
    "\uffa2\113\uffa2\114\uffa2\001\002\000\004\022\221\001\002" +
    "\000\072\014\uff6b\015\uff6b\020\uff6b\022\uff6b\023\uff6b\024" +
    "\uff6b\025\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b" +
    "\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\062\uff6b\074\uff6b" +
    "\077\uff6b\110\uff6b\111\uff6b\001\002\000\004\074\223\001" +
    "\002\000\056\004\031\005\060\006\032\007\057\010\041" +
    "\011\045\012\027\013\010\021\033\066\176\072\043\073" +
    "\030\076\011\100\054\101\036\102\024\104\034\105\006" +
    "\107\047\112\055\113\005\114\022\001\002\000\074\002" +
    "\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\021\uffa8\030\uffa8\031\uffa8\047\uffa8\067" +
    "\uffa8\072\uffa8\073\uffa8\075\225\076\uffa8\100\uffa8\101\uffa8" +
    "\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\112" +
    "\uffa8\113\uffa8\114\uffa8\001\002\000\056\004\031\005\060" +
    "\006\032\007\057\010\041\011\045\012\027\013\010\021" +
    "\033\066\176\072\043\073\030\076\011\100\054\101\036" +
    "\102\024\104\034\105\006\107\047\112\055\113\005\114" +
    "\022\001\002\000\074\002\uffa9\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\021\uffa9\030" +
    "\uffa9\031\uffa9\047\uffa9\067\uffa9\072\uffa9\073\uffa9\075\uffa9" +
    "\076\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\112\uffa9\113\uffa9\114\uffa9\001\002" +
    "\000\074\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\021\uffc1\030\uffc1\031\uffc1" +
    "\047\uffc1\067\uffc1\072\uffc1\073\uffc1\075\uffc1\076\uffc1\100" +
    "\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1" +
    "\107\uffc1\112\uffc1\113\uffc1\114\uffc1\001\002\000\074\002" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\021\uffb7\030\uffb7\031\uffb7\047\uffb7\067" +
    "\uffb7\072\uffb7\073\uffb7\075\uffb7\076\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\112" +
    "\uffb7\113\uffb7\114\uffb7\001\002\000\004\062\232\001\002" +
    "\000\032\004\031\005\060\006\032\007\057\010\076\011" +
    "\045\012\027\013\010\021\033\030\103\031\075\047\066" +
    "\001\002\000\006\015\151\025\243\001\002\000\036\004" +
    "\031\005\060\006\032\007\057\010\076\011\045\012\027" +
    "\013\010\021\033\030\103\031\075\047\066\067\240\103" +
    "\237\001\002\000\036\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\011\uffa4\012\uffa4\013\uffa4\021\uffa4\030\uffa4\031" +
    "\uffa4\047\uffa4\067\uffa4\103\uffa4\001\002\000\036\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\021\uffa5\030\uffa5\031\uffa5\047\uffa5\067\uffa5\103\uffa5" +
    "\001\002\000\056\004\031\005\060\006\032\007\057\010" +
    "\041\011\045\012\027\013\010\021\033\066\176\072\043" +
    "\073\030\076\011\100\054\101\036\102\024\104\034\105" +
    "\006\107\047\112\055\113\005\114\022\001\002\000\076" +
    "\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\021\uffa6\030\uffa6\031\uffa6" +
    "\047\uffa6\067\uffa6\072\uffa6\073\uffa6\075\uffa6\076\uffa6\100" +
    "\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6" +
    "\107\uffa6\112\uffa6\113\uffa6\114\uffa6\001\002\000\004\067" +
    "\242\001\002\000\076\002\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\021" +
    "\uffa7\030\uffa7\031\uffa7\047\uffa7\067\uffa7\072\uffa7\073\uffa7" +
    "\075\uffa7\076\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\106\uffa7\107\uffa7\112\uffa7\113\uffa7\114\uffa7" +
    "\001\002\000\056\004\031\005\060\006\032\007\057\010" +
    "\041\011\045\012\027\013\010\021\033\066\176\072\043" +
    "\073\030\076\011\100\054\101\036\102\024\104\034\105" +
    "\006\107\047\112\055\113\005\114\022\001\002\000\036" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\021\uffa3\030\uffa3\031\uffa3\047\uffa3\067\uffa3" +
    "\103\uffa3\001\002\000\032\004\031\005\060\006\032\007" +
    "\057\010\076\011\045\012\027\013\010\021\033\030\103" +
    "\031\075\047\066\001\002\000\004\022\247\001\002\000" +
    "\004\014\uff9c\001\002\000\074\002\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\021" +
    "\uffbd\030\uffbd\031\uffbd\047\uffbd\067\uffbd\072\uffbd\073\uffbd" +
    "\075\uffbd\076\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\106\uffbd\107\uffbd\112\uffbd\113\uffbd\114\uffbd" +
    "\001\002\000\074\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\021\uffbe\030\uffbe" +
    "\031\uffbe\047\uffbe\067\uffbe\072\uffbe\073\uffbe\075\uffbe\076" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\112\uffbe\113\uffbe\114\uffbe\001\002\000" +
    "\006\015\255\077\254\001\002\000\006\015\ufffa\077\ufffa" +
    "\001\002\000\056\004\031\005\060\006\032\007\057\010" +
    "\041\011\045\012\027\013\010\021\033\067\257\072\043" +
    "\073\030\076\011\100\054\101\036\102\024\104\034\105" +
    "\006\107\047\112\055\113\005\114\022\001\002\000\004" +
    "\010\256\001\002\000\006\015\ufffb\077\ufffb\001\002\000" +
    "\076\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\021\uffb1\030\uffb1\031" +
    "\uffb1\047\uffb1\067\uffb1\072\uffb1\073\uffb1\075\uffb1\076\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106" +
    "\uffb1\107\uffb1\112\uffb1\113\uffb1\114\uffb1\001\002\000\056" +
    "\004\031\005\060\006\032\007\057\010\041\011\045\012" +
    "\027\013\010\021\033\067\261\072\043\073\030\076\011" +
    "\100\054\101\036\102\024\104\034\105\006\107\047\112" +
    "\055\113\005\114\022\001\002\000\076\002\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\021\uffb2\030\uffb2\031\uffb2\047\uffb2\067\uffb2" +
    "\072\uffb2\073\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\112\uffb2" +
    "\113\uffb2\114\uffb2\001\002\000\074\002\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\021\uffbc\030\uffbc\031\uffbc\047\uffbc\067\uffbc\072\uffbc\073" +
    "\uffbc\075\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\112\uffbc\113\uffbc\114" +
    "\uffbc\001\002\000\056\004\031\005\060\006\032\007\057" +
    "\010\041\011\045\012\027\013\010\021\033\072\043\073" +
    "\030\076\011\100\054\101\036\102\024\104\034\105\006" +
    "\106\264\107\047\112\055\113\005\114\022\001\002\000" +
    "\032\004\031\005\060\006\032\007\057\010\076\011\045" +
    "\012\027\013\010\021\033\030\103\031\075\047\066\001" +
    "\002\000\004\014\uffa1\001\002\000\032\004\031\005\060" +
    "\006\032\007\057\010\076\011\045\012\027\013\010\021" +
    "\033\030\103\031\075\047\066\001\002\000\006\015\151" +
    "\022\270\001\002\000\004\014\uff9d\001\002\000\074\002" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\021\uffbf\030\uffbf\031\uffbf\047\uffbf\067" +
    "\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\100\uffbf\101\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\112" +
    "\uffbf\113\uffbf\114\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\064\002\051\036\012\037\011\041\025\042" +
    "\003\043\036\044\013\045\020\046\006\047\037\050\045" +
    "\053\034\054\024\055\014\056\047\057\052\060\050\074" +
    "\055\075\015\076\041\077\060\100\017\101\022\102\043" +
    "\103\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\036\262\037\011\041\025\042\003\043\036\044\013" +
    "\045\020\046\006\047\037\050\045\053\034\054\024\055" +
    "\014\056\047\057\052\060\050\074\055\075\015\076\041" +
    "\077\060\100\017\101\022\102\043\103\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\251\001\001" +
    "\000\002\001\001\000\060\037\205\041\025\042\003\043" +
    "\036\044\013\045\020\046\006\047\037\050\045\053\034" +
    "\054\024\055\014\056\047\057\052\060\050\074\055\075" +
    "\015\076\041\077\060\100\017\101\022\102\043\103\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\062\230\063" +
    "\103\064\066\065\101\066\076\067\063\071\073\072\071" +
    "\073\072\074\100\075\015\076\041\077\060\100\017\101" +
    "\104\102\070\103\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\062\221\063\103\064" +
    "\066\065\101\066\076\067\063\071\073\072\071\073\072" +
    "\074\100\075\015\076\041\077\060\100\017\101\104\102" +
    "\070\103\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\062\217\063\103\064\066\065\101\066\076\067" +
    "\063\071\073\072\071\073\072\074\100\075\015\076\041" +
    "\077\060\100\017\101\104\102\070\103\067\001\001\000" +
    "\044\062\214\063\103\064\066\065\101\066\076\067\063" +
    "\071\073\072\071\073\072\074\100\075\015\076\041\077" +
    "\060\100\017\101\104\102\070\103\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\043\165\074\055\075\015\076\041\077\060\100\017" +
    "\101\022\102\043\103\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\061\064\062\077\063\103\064\066\065\101\066" +
    "\076\067\063\071\073\072\071\073\072\074\100\075\015" +
    "\076\041\077\060\100\017\101\104\102\070\103\067\001" +
    "\001\000\004\070\123\001\001\000\002\001\001\000\022" +
    "\074\153\075\015\076\041\077\060\100\017\101\104\102" +
    "\070\103\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\074\152\075\015\076\041\077\060" +
    "\100\017\101\104\102\070\103\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\074\143\075\015\076\041\077" +
    "\060\100\017\101\104\102\070\103\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\064\066\065\106\066" +
    "\076\067\063\071\073\072\071\073\072\074\100\075\015" +
    "\076\041\077\060\100\017\101\104\102\070\103\067\001" +
    "\001\000\002\001\001\000\036\064\142\066\076\067\063" +
    "\071\073\072\071\073\072\074\100\075\015\076\041\077" +
    "\060\100\017\101\104\102\070\103\067\001\001\000\036" +
    "\064\111\066\076\067\063\071\073\072\071\073\072\074" +
    "\100\075\015\076\041\077\060\100\017\101\104\102\070" +
    "\103\067\001\001\000\002\001\001\000\034\066\113\067" +
    "\063\071\073\072\071\073\072\074\100\075\015\076\041" +
    "\077\060\100\017\101\104\102\070\103\067\001\001\000" +
    "\002\001\001\000\032\067\141\071\073\072\071\073\072" +
    "\074\100\075\015\076\041\077\060\100\017\101\104\102" +
    "\070\103\067\001\001\000\032\067\116\071\073\072\071" +
    "\073\072\074\100\075\015\076\041\077\060\100\017\101" +
    "\104\102\070\103\067\001\001\000\004\070\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\071\124\072\071\073\072\074\100" +
    "\075\015\076\041\077\060\100\017\101\104\102\070\103" +
    "\067\001\001\000\002\001\001\000\026\072\140\073\072" +
    "\074\100\075\015\076\041\077\060\100\017\101\104\102" +
    "\070\103\067\001\001\000\026\072\127\073\072\074\100" +
    "\075\015\076\041\077\060\100\017\101\104\102\070\103" +
    "\067\001\001\000\002\001\001\000\024\073\137\074\100" +
    "\075\015\076\041\077\060\100\017\101\104\102\070\103" +
    "\067\001\001\000\024\073\136\074\100\075\015\076\041" +
    "\077\060\100\017\101\104\102\070\103\067\001\001\000" +
    "\024\073\135\074\100\075\015\076\041\077\060\100\017" +
    "\101\104\102\070\103\067\001\001\000\024\073\134\074" +
    "\100\075\015\076\041\077\060\100\017\101\104\102\070" +
    "\103\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\061\145\062\077\063\103\064\066\065\101\066\076" +
    "\067\063\071\073\072\071\073\072\074\100\075\015\076" +
    "\041\077\060\100\017\101\104\102\070\103\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\062\151\063\103\064\066\065\101\066\076\067\063" +
    "\071\073\072\071\073\072\074\100\075\015\076\041\077" +
    "\060\100\017\101\104\102\070\103\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\061\157\062\077\063\103" +
    "\064\066\065\101\066\076\067\063\071\073\072\071\073" +
    "\072\074\100\075\015\076\041\077\060\100\017\101\104" +
    "\102\070\103\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\062\170\063\103\064\066\065\101\066\076\067\063" +
    "\071\073\072\071\073\072\074\100\075\015\076\041\077" +
    "\060\100\017\101\104\102\070\103\067\001\001\000\002" +
    "\001\001\000\044\062\206\063\103\064\066\065\101\066" +
    "\076\067\063\071\073\072\071\073\072\074\100\075\015" +
    "\076\041\077\060\100\017\101\104\102\070\103\067\001" +
    "\001\000\044\062\173\063\103\064\066\065\101\066\076" +
    "\067\063\071\073\072\071\073\072\074\100\075\015\076" +
    "\041\077\060\100\017\101\104\102\070\103\067\001\001" +
    "\000\002\001\001\000\064\035\177\037\176\040\200\041" +
    "\025\042\003\043\036\044\013\045\020\046\006\047\037" +
    "\050\045\053\034\054\024\055\014\056\047\057\052\060" +
    "\050\074\055\075\015\076\041\077\060\100\017\101\022" +
    "\102\043\103\016\001\001\000\062\036\203\037\011\041" +
    "\025\042\003\043\036\044\013\045\020\046\006\047\037" +
    "\050\045\053\034\054\024\055\014\056\047\057\052\060" +
    "\050\074\055\075\015\076\041\077\060\100\017\101\022" +
    "\102\043\103\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\037\205\041\025\042\003\043\036\044\013\045" +
    "\020\046\006\047\037\050\045\053\034\054\024\055\014" +
    "\056\047\057\052\060\050\074\055\075\015\076\041\077" +
    "\060\100\017\101\022\102\043\103\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\035" +
    "\177\037\176\040\210\041\025\042\003\043\036\044\013" +
    "\045\020\046\006\047\037\050\045\053\034\054\024\055" +
    "\014\056\047\057\052\060\050\074\055\075\015\076\041" +
    "\077\060\100\017\101\022\102\043\103\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\062\213\063\103" +
    "\064\066\065\101\066\076\067\063\071\073\072\071\073" +
    "\072\074\100\075\015\076\041\077\060\100\017\101\104" +
    "\102\070\103\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\035\177\037\176\040\216\041\025\042\003" +
    "\043\036\044\013\045\020\046\006\047\037\050\045\053" +
    "\034\054\024\055\014\056\047\057\052\060\050\074\055" +
    "\075\015\076\041\077\060\100\017\101\022\102\043\103" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\035\177\037\176\040" +
    "\223\041\025\042\003\043\036\044\013\045\020\046\006" +
    "\047\037\050\045\053\034\054\024\055\014\056\047\057" +
    "\052\060\050\074\055\075\015\076\041\077\060\100\017" +
    "\101\022\102\043\103\016\001\001\000\002\001\001\000" +
    "\064\035\177\037\176\040\225\041\025\042\003\043\036" +
    "\044\013\045\020\046\006\047\037\050\045\053\034\054" +
    "\024\055\014\056\047\057\052\060\050\074\055\075\015" +
    "\076\041\077\060\100\017\101\022\102\043\103\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\051\233\052\234\061\232\062" +
    "\077\063\103\064\066\065\101\066\076\067\063\071\073" +
    "\072\071\073\072\074\100\075\015\076\041\077\060\100" +
    "\017\101\104\102\070\103\067\001\001\000\002\001\001" +
    "\000\050\052\235\061\232\062\077\063\103\064\066\065" +
    "\101\066\076\067\063\071\073\072\071\073\072\074\100" +
    "\075\015\076\041\077\060\100\017\101\104\102\070\103" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\035\177\037\176\040\240\041\025\042\003\043\036\044" +
    "\013\045\020\046\006\047\037\050\045\053\034\054\024" +
    "\055\014\056\047\057\052\060\050\074\055\075\015\076" +
    "\041\077\060\100\017\101\022\102\043\103\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\035\177\037\176\040\243\041\025\042\003\043\036" +
    "\044\013\045\020\046\006\047\037\050\045\053\034\054" +
    "\024\055\014\056\047\057\052\060\050\074\055\075\015" +
    "\076\041\077\060\100\017\101\022\102\043\103\016\001" +
    "\001\000\002\001\001\000\044\062\245\063\103\064\066" +
    "\065\101\066\076\067\063\071\073\072\071\073\072\074" +
    "\100\075\015\076\041\077\060\100\017\101\104\102\070" +
    "\103\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\036\257\037\011\041\025\042\003\043" +
    "\036\044\013\045\020\046\006\047\037\050\045\053\034" +
    "\054\024\055\014\056\047\057\052\060\050\074\055\075" +
    "\015\076\041\077\060\100\017\101\022\102\043\103\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\037\205\041\025\042\003\043\036\044\013" +
    "\045\020\046\006\047\037\050\045\053\034\054\024\055" +
    "\014\056\047\057\052\060\050\074\055\075\015\076\041" +
    "\077\060\100\017\101\022\102\043\103\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\037\205\041\025" +
    "\042\003\043\036\044\013\045\020\046\006\047\037\050" +
    "\045\053\034\054\024\055\014\056\047\057\052\060\050" +
    "\074\055\075\015\076\041\077\060\100\017\101\022\102" +
    "\043\103\016\001\001\000\044\062\264\063\103\064\066" +
    "\065\101\066\076\067\063\071\073\072\071\073\072\074" +
    "\100\075\015\076\041\077\060\100\017\101\104\102\070" +
    "\103\067\001\001\000\002\001\001\000\046\061\266\062" +
    "\077\063\103\064\066\065\101\066\076\067\063\071\073" +
    "\072\071\073\072\074\100\075\015\076\041\077\060\100" +
    "\017\101\104\102\070\103\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private AST ast;
	
	public AST getAST(){
		return ast;
	}
	
        private ArrayList<ErrorC> errores = new ArrayList<>();

        public ArrayList<ErrorC> getErrores(){
            return this.errores;
        }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
                ErrorC error = new ErrorC();
                error.setTipo("Sintáctico");
                error.setLinea(s.left+1);
                error.setColumna(s.right+1);
                error.setValor(s.value.toString());
                error.setDescripcion("Identificador " +s.value + " no reconocido.");
                this.errores.add(error);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
                ErrorC error = new ErrorC();
                error.setTipo("Sintáctico");
                error.setLinea(s.left+1);
                error.setColumna(s.right+1);
                error.setValor(s.value.toString());
                error.setDescripcion("Identificador " +s.value + " no reconocido.");
                this.errores.add(error);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<NodoAST> a = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            parser.ast = new AST(a); 
            System.out.println("DOCUMENTO OK"); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROGRAM_NAME USES TYPEDEF CONSTDEF VARDEF PROCEDUREDEF BLOQUE punto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM_NAME ::= program_ id puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            System.out.println("programa "+a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM_NAME",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= uses_ ID_LIST puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // USES ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ID_LIST ::= ID_LIST coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_LIST",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ID_LIST ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_LIST",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TYPE_PRIMITIVE ::= char_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE_PRIMITIVE ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE_PRIMITIVE ::= real_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE_PRIMITIVE ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_PRIMITIVE ::= word_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_PRIMITIVE ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPEDEF ::= type_ TYPE_LIST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPEDEF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPEDEF ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPEDEF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE_LIST ::= TYPE_LIST TYPE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE_LIST ::= TYPE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= ID_LIST igual TYPE_VALUE puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE_VALUE ::= TYPE_SPECIFIER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_VALUE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE_VALUE ::= parIzquierda ID_LIST parDerecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_VALUE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE_VALUE ::= LITERAL puntos3 LITERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_VALUE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE_SPECIFIER ::= TYPE_PRIMITIVE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE_SPECIFIER ::= array_ corcheteIzquierda DIM_LIST corcheteDerecha of_ TYPE_SPECIFIER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE_SPECIFIER ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPE_SPECIFIER ::= record_ VAR_LIST end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DIM_LIST ::= DIM_LIST coma DIM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIM_LIST ::= DIM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIM ::= LITERAL puntos2 LITERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIM ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARDEF ::= var_ VAR_LIST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARDEF",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARDEF ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARDEF",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAR_LIST ::= VAR_LIST VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR_LIST",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VAR_LIST ::= VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR_LIST",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAR ::= ID_LIST dospuntos TYPE_SPECIFIER puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VAR ::= ID_LIST dospuntos TYPE_SPECIFIER asignacion EXPRESSION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONSTDEF ::= const_ CONST_LIST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTDEF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONSTDEF ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTDEF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONST_LIST ::= CONST_LIST CONST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONST_LIST",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONST_LIST ::= CONST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONST_LIST",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONST ::= ID_LIST igual EXPRESSION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PROCEDUREDEF ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCEDUREDEF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PROCEDUREDEF ::= METHOD_LIST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCEDUREDEF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METHOD_LIST ::= METHOD_LIST METHOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METHOD_LIST ::= METHOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METHOD ::= FUNDEF puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD ::= FUNDEF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD ::= PROCDEF puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD ::= PROCDEF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNDEF ::= function_ id PARAMETERS dospuntos TYPE_SPECIFIER puntoycoma VARDEF PROCEDUREDEF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNDEF",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETERS ::= parIzquierda PARAMETERS_LIST parDerecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAMETERS ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMETERS_LIST ::= PARAMETERS_LIST puntoycoma PARAMETER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_LIST",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETERS_LIST ::= PARAMETER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_LIST",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETER ::= ID_LIST dospuntos TYPE_SPECIFIER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETER",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETER ::= var_ ID_LIST dospuntos TYPE_SPECIFIER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETER",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROCDEF ::= procedure_ id PARAMETERS puntoycoma VARDEF PROCEDUREDEF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCDEF",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= begin_ SENTENCIAS end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= begin_ end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENT ::= BLOQUE puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STATEMENT ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STATEMENT ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              ArrayList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAST> a = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= SENTENCIA 
            {
              ArrayList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= WITH_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= WITH_STMT 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= ASSIGNMENT_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= BREAK_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= CONTINUE_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= EXIT_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= IF_STMT 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= CASE_STMT 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= CASE_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= WHILE_STMT 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= REPEAT_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= FOR_STMT 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= WRITE_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Write a = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= READ_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= EXPRESSION_STMT puntoycoma 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // WITH_STMT ::= with_ ID_LIST do_ SENTENCIAS end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WITH_STMT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WITH_STMT ::= with_ ID_LIST do_ end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WITH_STMT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TARGET ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TARGET ::= ATTRIBUTEREF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TARGET ::= ACCESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASSIGNMENT_STMT ::= TARGET asignacion EXPRESSION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_STMT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BREAK_STMT ::= break_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_STMT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTINUE_STMT ::= continue_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUE_STMT",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXIT_STMT ::= exit_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXIT_STMT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF_STMT ::= if_ EXPRESSION then_ STATEMENT else_ STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STMT",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF_STMT ::= if_ EXPRESSION then_ STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STMT",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASE_STMT ::= case_ EXPRESSION of_ CASE_LIST default_ STATEMENT end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STMT",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASE_STMT ::= case_ EXPRESSION of_ CASE_LIST end_ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STMT",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASE_LIST ::= CASE_LIST CASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_LIST",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASE_LIST ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_LIST",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASE ::= EXPRESSION_LIST dospuntos STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // WHILE_STMT ::= while_ EXPRESSION do_ STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // REPEAT_STMT ::= repeat_ SENTENCIAS until_ EXPRESSION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEAT_STMT",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR_STMT ::= for_ TARGET asignacion EXPRESSION to_ EXPRESSION do_ STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR_STMT ::= for_ TARGET asignacion EXPRESSION downto_ EXPRESSION do_ STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WRITE_STMT ::= write_ parIzquierda EXPRESSION_LIST parDerecha 
            {
              Write RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Write(false, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_STMT",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WRITE_STMT ::= writeln_ parIzquierda EXPRESSION_LIST parDerecha 
            {
              Write RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Write(true, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_STMT",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // READ_STMT ::= read_ parIzquierda EXPRESSION parDerecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ_STMT",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESSION_STMT ::= CALL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_STMT",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESSION_STMT ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_STMT",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESSION_LIST ::= EXPRESSION_LIST coma EXPRESSION 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESSION_LIST ::= EXPRESSION 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESSION ::= OR_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OR_EXPR ::= NANDNOR_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OR_EXPR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OR_EXPR ::= OR_EXPR or NANDNOR_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OR_EXPR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NANDNOR_EXPR ::= AND_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NANDNOR_EXPR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NANDNOR_EXPR ::= NANDNOR_EXPR nand AND_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NANDNOR_EXPR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NANDNOR_EXPR ::= NANDNOR_EXPR nor AND_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NANDNOR_EXPR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AND_EXPR ::= COMPARISON_EQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("AND_EXPR",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // AND_EXPR ::= AND_EXPR and COMPARISON_EQ 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("AND_EXPR",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARISON_EQ ::= COMPARISON 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON_EQ",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARISON_EQ ::= COMPARISON_EQ igual COMPARISON 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON_EQ",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARISON_EQ ::= COMPARISON_EQ diferente COMPARISON 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON_EQ",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARISON ::= A_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARISON ::= COMPARISON COMP_OPERATOR A_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMP_OPERATOR ::= mayorque 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COMP_OPERATOR ::= menorque 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COMP_OPERATOR ::= mayorigual 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMP_OPERATOR ::= menorigual 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // A_EXPR ::= M_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A_EXPR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // A_EXPR ::= A_EXPR mas M_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A_EXPR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // A_EXPR ::= A_EXPR menos M_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A_EXPR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // M_EXPR ::= U_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // M_EXPR ::= M_EXPR asterisco U_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // M_EXPR ::= M_EXPR diagonal U_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // M_EXPR ::= M_EXPR modulo U_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // M_EXPR ::= M_EXPR potencia U_EXPR 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // U_EXPR ::= PRIMARY 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // U_EXPR ::= mas PRIMARY 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // U_EXPR ::= menos PRIMARY 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // U_EXPR ::= not PRIMARY 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PRIMARY ::= ATOM 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PRIMARY ::= ATTRIBUTEREF 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PRIMARY ::= ACCESS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PRIMARY ::= CALL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ATOM ::= id 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATOM",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ATOM ::= LITERAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATOM",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ATOM ::= ENCLOSURE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATOM",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LITERAL ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.STRING), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LITERAL ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.CHAR), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LITERAL ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.INTEGER), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LITERAL ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.REAL), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LITERAL ::= nil_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.NIL), null, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LITERAL ::= true_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.BOOLEAN), 1, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LITERAL ::= false_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.BOOLEAN), 0, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ENCLOSURE ::= PARENTH_FORM 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCLOSURE",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARENTH_FORM ::= parIzquierda EXPRESSION parDerecha 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARENTH_FORM",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ATTRIBUTEREF ::= PRIMARY punto id 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATTRIBUTEREF",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ACCESS ::= PRIMARY corcheteIzquierda EXPRESSION_LIST corcheteDerecha 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESS",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CALL ::= id parIzquierda parDerecha 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CALL ::= id parIzquierda EXPRESSION_LIST parDerecha 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
