
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import analizador.ast.*;
import analizador.ast.entorno.Tipo;
import analizador.ast.entorno.Type;
import analizador.ast.entorno.Dimension;
import analizador.ast.expresion.*;
import analizador.ast.expresion.operacion.*;
import analizador.ast.instruccion.*;
import analizador.ast.instruccion.condicionales.*;
import analizador.ast.instruccion.ciclos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\005\000\002\005\005\000\002\005\002" +
    "\000\002\006\005\000\002\006\003\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\004\000\002\011\002\000\002\012\004" +
    "\000\002\012\003\000\002\013\006\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\010\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\004" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\021\004\000\002\021\002\000\002\022\004\000\002" +
    "\022\003\000\002\023\006\000\002\023\010\000\002\024" +
    "\004\000\002\024\002\000\002\025\002\000\002\025\003" +
    "\000\002\026\004\000\002\026\003\000\002\027\004\000" +
    "\002\027\003\000\002\027\004\000\002\027\003\000\002" +
    "\030\013\000\002\031\005\000\002\031\004\000\002\031" +
    "\002\000\002\032\005\000\002\032\003\000\002\033\005" +
    "\000\002\033\006\000\002\034\011\000\002\035\005\000" +
    "\002\035\004\000\002\040\004\000\002\040\003\000\002" +
    "\040\003\000\002\036\004\000\002\036\003\000\002\037" +
    "\004\000\002\037\003\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\004\000\002\037\003\000\002" +
    "\037\004\000\002\037\003\000\002\037\004\000\002\037" +
    "\004\000\002\041\007\000\002\041\006\000\002\043\005" +
    "\000\002\043\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\042\005\000\002\045\003\000\002" +
    "\046\003\000\002\047\003\000\002\050\010\000\002\050" +
    "\006\000\002\051\012\000\002\051\012\000\002\051\007" +
    "\000\002\052\004\000\002\052\003\000\002\053\005\000" +
    "\002\054\006\000\002\055\006\000\002\056\012\000\002" +
    "\056\012\000\002\057\006\000\002\057\006\000\002\060" +
    "\003\000\002\060\003\000\002\061\005\000\002\061\003" +
    "\000\002\062\003\000\002\063\003\000\002\063\005\000" +
    "\002\065\003\000\002\065\005\000\002\065\005\000\002" +
    "\064\003\000\002\064\005\000\002\066\003\000\002\066" +
    "\005\000\002\066\005\000\002\067\003\000\002\067\005" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\071\003\000\002\071\005\000\002" +
    "\071\005\000\002\072\003\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\005\000\002\073\003" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\077\003\000\002\100\005\000\002" +
    "\101\005\000\002\102\006\000\002\103\005\000\002\103" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\004\056\004\001\002\000\004\010\u0129\001" +
    "\002\000\020\057\012\060\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\070\ufffc\001\002\000\004\002\010\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\016" +
    "\060\020\063\ufff0\064\ufff0\065\ufff0\066\ufff0\070\ufff0\001" +
    "\002\000\004\010\014\001\002\000\006\014\016\015\015" +
    "\001\002\000\006\014\ufffa\015\ufffa\001\002\000\004\010" +
    "\017\001\002\000\016\060\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\070\ufffd\001\002\000\006\014\ufffb\015\ufffb\001" +
    "\002\000\004\010\334\001\002\000\014\063\uffd7\064\022" +
    "\065\uffd7\066\uffd7\070\uffd7\001\002\000\004\010\334\001" +
    "\002\000\012\063\024\065\uffdd\066\uffdd\070\uffdd\001\002" +
    "\000\004\010\334\001\002\000\010\065\031\066\uffd6\070" +
    "\032\001\002\000\012\014\u011b\065\uffd1\066\uffd1\070\uffd1" +
    "\001\002\000\004\066\044\001\002\000\012\014\u0118\065" +
    "\uffcf\066\uffcf\070\uffcf\001\002\000\004\010\u0110\001\002" +
    "\000\004\010\036\001\002\000\010\065\uffd3\066\uffd3\070" +
    "\uffd3\001\002\000\010\065\031\066\uffd5\070\032\001\002" +
    "\000\010\065\uffd4\066\uffd4\070\uffd4\001\002\000\006\014" +
    "\uffcb\021\037\001\002\000\010\010\334\022\331\063\330" +
    "\001\002\000\004\014\041\001\002\000\012\063\024\065" +
    "\uffdd\066\uffdd\070\uffdd\001\002\000\010\065\031\066\uffd6" +
    "\070\032\001\002\000\004\066\044\001\002\000\054\004" +
    "\073\005\120\006\074\007\117\010\103\011\107\012\071" +
    "\013\053\021\075\067\046\072\105\073\072\076\054\100" +
    "\114\101\100\102\066\104\076\105\051\107\111\112\115" +
    "\113\050\001\002\000\012\014\uffc6\065\uffc6\066\uffc6\070" +
    "\uffc6\001\002\000\102\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\021\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\047\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\072\uffc4\073\uffc4\075\uffc4\076\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\112\uffc4\113\uffc4\001\002\000\004\014\326\001\002\000" +
    "\004\021\323\001\002\000\052\004\073\005\120\006\074" +
    "\007\117\010\103\011\107\012\071\013\053\021\075\072" +
    "\105\073\072\076\054\100\114\101\100\102\066\104\076" +
    "\105\051\107\111\112\115\113\050\001\002\000\004\014" +
    "\317\001\002\000\076\014\uff69\015\uff69\016\uff69\017\uff69" +
    "\020\uff69\022\uff69\023\uff69\024\uff69\025\uff69\027\uff69\030" +
    "\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69" +
    "\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\062\uff69\074\uff69\077\uff69\110\uff69\111\uff69" +
    "\001\002\000\024\004\073\005\120\006\074\007\117\010" +
    "\225\011\107\012\071\013\053\021\075\001\002\000\054" +
    "\004\073\005\120\006\074\007\117\010\103\011\107\012" +
    "\071\013\053\021\075\067\305\072\105\073\072\076\054" +
    "\100\114\101\100\102\066\104\076\105\051\107\111\112" +
    "\115\113\050\001\002\000\056\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\021\uffbf\067" +
    "\uffbf\072\uffbf\073\uffbf\076\uffbf\100\uffbf\101\uffbf\102\uffbf" +
    "\104\uffbf\105\uffbf\106\uffbf\107\uffbf\112\uffbf\113\uffbf\001" +
    "\002\000\004\014\304\001\002\000\070\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\021" +
    "\uffb3\030\uffb3\031\uffb3\047\uffb3\067\uffb3\072\uffb3\073\uffb3" +
    "\075\uffb3\076\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104" +
    "\uffb3\105\uffb3\106\uffb3\107\uffb3\112\uffb3\113\uffb3\001\002" +
    "\000\074\014\uff76\015\uff76\017\uff76\020\uff76\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\062\uff76" +
    "\074\uff76\077\uff76\110\uff76\111\uff76\001\002\000\010\014" +
    "\uff97\023\uff73\027\uff73\001\002\000\074\014\uff68\015\uff68" +
    "\017\uff68\020\uff68\022\uff68\023\uff68\024\uff68\025\uff68\027" +
    "\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68" +
    "\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\062\uff68\074\uff68\077\uff68\110\uff68" +
    "\111\uff68\001\002\000\004\014\303\001\002\000\014\015" +
    "\uffab\023\uff75\026\uffab\027\uff75\077\uffab\001\002\000\032" +
    "\004\073\005\120\006\074\007\117\010\136\011\107\012" +
    "\071\013\053\021\075\030\143\031\135\047\127\001\002" +
    "\000\004\014\261\001\002\000\072\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\260" +
    "\021\uffbd\030\uffbd\031\uffbd\047\uffbd\067\uffbd\072\uffbd\073" +
    "\uffbd\075\uffbd\076\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\112\uffbd\113\uffbd\001" +
    "\002\000\076\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a" +
    "\022\uff6a\023\uff6a\024\uff6a\025\uff6a\027\uff6a\030\uff6a\031" +
    "\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046" +
    "\uff6a\062\uff6a\074\uff6a\077\uff6a\110\uff6a\111\uff6a\001\002" +
    "\000\032\004\073\005\120\006\074\007\117\010\136\011" +
    "\107\012\071\013\053\021\075\030\143\031\135\047\127" +
    "\001\002\000\076\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\027\uff6f\030\uff6f" +
    "\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\062\uff6f\074\uff6f\077\uff6f\110\uff6f\111\uff6f\001" +
    "\002\000\076\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\022\uff6d\023\uff6d\024\uff6d\025\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046" +
    "\uff6d\062\uff6d\074\uff6d\077\uff6d\110\uff6d\111\uff6d\001\002" +
    "\000\032\004\073\005\120\006\074\007\117\010\136\011" +
    "\107\012\071\013\053\021\075\030\143\031\135\047\127" +
    "\001\002\000\032\004\073\005\120\006\074\007\117\010" +
    "\136\011\107\012\071\013\053\021\075\030\143\031\135" +
    "\047\127\001\002\000\070\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\021\uffb5\030\uffb5" +
    "\031\uffb5\047\uffb5\067\uffb5\072\uffb5\073\uffb5\075\uffb5\076" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5" +
    "\106\uffb5\107\uffb5\112\uffb5\113\uffb5\001\002\000\004\014" +
    "\uffa6\001\002\000\004\026\244\001\002\000\070\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\021\uffb8\030\uffb8\031\uffb8\047\uffb8\067\uffb8\072\uffb8" +
    "\073\uffb8\075\uffb8\076\uffb8\100\uffb8\101\uffb8\102\uffb8\103" +
    "\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\112\uffb8\113\uffb8" +
    "\001\002\000\014\014\uff96\021\205\023\uff72\026\uffac\027" +
    "\uff72\001\002\000\074\014\uff71\015\uff71\017\uff71\020\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\027\uff71\030\uff71\031" +
    "\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046" +
    "\uff71\062\uff71\074\uff71\077\uff71\110\uff71\111\uff71\001\002" +
    "\000\004\014\uffa8\001\002\000\014\015\uffaa\023\uff74\026" +
    "\uffaa\027\uff74\077\uffaa\001\002\000\076\014\uff6b\015\uff6b" +
    "\016\uff6b\017\uff6b\020\uff6b\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b" +
    "\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043" +
    "\uff6b\044\uff6b\045\uff6b\046\uff6b\062\uff6b\074\uff6b\077\uff6b" +
    "\110\uff6b\111\uff6b\001\002\000\072\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\243" +
    "\021\uffb7\030\uffb7\031\uffb7\047\uffb7\067\uffb7\072\uffb7\073" +
    "\uffb7\075\uffb7\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\104\uffb7\105\uffb7\106\uffb7\107\uffb7\112\uffb7\113\uffb7\001" +
    "\002\000\024\004\073\005\120\006\074\007\117\010\225" +
    "\011\107\012\071\013\053\021\075\001\002\000\004\014" +
    "\223\001\002\000\004\014\222\001\002\000\004\014\uffa7" +
    "\001\002\000\004\021\217\001\002\000\006\023\123\027" +
    "\122\001\002\000\076\014\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\020\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\027\uff6c\030" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c" +
    "\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\046\uff6c\062\uff6c\074\uff6c\077\uff6c\110\uff6c\111\uff6c" +
    "\001\002\000\076\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e" +
    "\046\uff6e\062\uff6e\074\uff6e\077\uff6e\110\uff6e\111\uff6e\001" +
    "\002\000\074\014\uff70\015\uff70\017\uff70\020\uff70\022\uff70" +
    "\023\uff70\024\uff70\025\uff70\027\uff70\030\uff70\031\uff70\032" +
    "\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70" +
    "\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\062" +
    "\uff70\074\uff70\077\uff70\110\uff70\111\uff70\001\002\000\004" +
    "\010\216\001\002\000\032\004\073\005\120\006\074\007" +
    "\117\010\136\011\107\012\071\013\053\021\075\030\143" +
    "\031\135\047\127\001\002\000\054\014\uff8b\015\uff8b\017" +
    "\uff8b\020\uff8b\022\uff8b\024\uff8b\025\uff8b\036\163\037\160" +
    "\040\161\041\162\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\062\uff8b\074\uff8b\077\uff8b\110\uff8b\111\uff8b\001\002" +
    "\000\006\015\210\024\215\001\002\000\040\014\uff90\015" +
    "\uff90\017\uff90\022\uff90\024\uff90\025\uff90\043\153\044\uff90" +
    "\045\uff90\046\uff90\062\uff90\074\uff90\077\uff90\110\uff90\111" +
    "\uff90\001\002\000\024\004\073\005\120\006\074\007\117" +
    "\010\136\011\107\012\071\013\053\021\075\001\002\000" +
    "\074\014\uff73\015\uff73\017\uff73\020\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\062\uff73\074" +
    "\uff73\077\uff73\110\uff73\111\uff73\001\002\000\074\014\uff74" +
    "\015\uff74\017\uff74\020\uff74\022\uff74\023\uff74\024\uff74\025" +
    "\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74" +
    "\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043" +
    "\uff74\044\uff74\045\uff74\046\uff74\062\uff74\074\uff74\077\uff74" +
    "\110\uff74\111\uff74\001\002\000\070\014\uff82\015\uff82\017" +
    "\uff82\020\uff82\022\uff82\024\uff82\025\uff82\030\uff82\031\uff82" +
    "\032\173\033\171\034\174\035\172\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\062\uff82\074\uff82\077\uff82\110\uff82\111\uff82\001\002\000" +
    "\070\014\uff7f\015\uff7f\017\uff7f\020\uff7f\022\uff7f\024\uff7f" +
    "\025\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\062\uff7f\074\uff7f\077\uff7f\110" +
    "\uff7f\111\uff7f\001\002\000\060\014\uff88\015\uff88\017\uff88" +
    "\020\uff88\022\uff88\024\uff88\025\uff88\030\166\031\167\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\062\uff88\074\uff88\077\uff88\110\uff88\111" +
    "\uff88\001\002\000\024\004\073\005\120\006\074\007\117" +
    "\010\136\011\107\012\071\013\053\021\075\001\002\000" +
    "\076\014\uff72\015\uff72\017\uff72\020\uff72\021\205\022\uff72" +
    "\023\uff72\024\uff72\025\uff72\027\uff72\030\uff72\031\uff72\032" +
    "\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72" +
    "\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\062" +
    "\uff72\074\uff72\077\uff72\110\uff72\111\uff72\001\002\000\044" +
    "\014\uff8d\015\uff8d\017\uff8d\020\155\022\uff8d\024\uff8d\025" +
    "\uff8d\042\156\043\uff8d\044\uff8d\045\uff8d\046\uff8d\062\uff8d" +
    "\074\uff8d\077\uff8d\110\uff8d\111\uff8d\001\002\000\012\015" +
    "\uff94\022\uff94\024\uff94\025\uff94\001\002\000\074\014\uff7a" +
    "\015\uff7a\017\uff7a\020\uff7a\022\uff7a\023\123\024\uff7a\025" +
    "\uff7a\027\122\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\062\uff7a\074\uff7a\077\uff7a" +
    "\110\uff7a\111\uff7a\001\002\000\036\014\uff92\015\uff92\017" +
    "\uff92\022\uff92\024\uff92\025\uff92\044\150\045\151\046\uff92" +
    "\062\uff92\074\uff92\077\uff92\110\uff92\111\uff92\001\002\000" +
    "\024\004\073\005\120\006\074\007\117\010\136\011\107" +
    "\012\071\013\053\021\075\001\002\000\032\014\uff93\015" +
    "\uff93\017\uff93\022\uff93\024\uff93\025\uff93\046\146\062\uff93" +
    "\074\uff93\077\uff93\110\uff93\111\uff93\001\002\000\074\014" +
    "\uff75\015\uff75\017\uff75\020\uff75\022\uff75\023\uff75\024\uff75" +
    "\025\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\062\uff75\074\uff75\077" +
    "\uff75\110\uff75\111\uff75\001\002\000\032\004\073\005\120" +
    "\006\074\007\117\010\136\011\107\012\071\013\053\021" +
    "\075\030\143\031\135\047\127\001\002\000\036\014\uff91" +
    "\015\uff91\017\uff91\022\uff91\024\uff91\025\uff91\044\150\045" +
    "\151\046\uff91\062\uff91\074\uff91\077\uff91\110\uff91\111\uff91" +
    "\001\002\000\032\004\073\005\120\006\074\007\117\010" +
    "\136\011\107\012\071\013\053\021\075\030\143\031\135" +
    "\047\127\001\002\000\032\004\073\005\120\006\074\007" +
    "\117\010\136\011\107\012\071\013\053\021\075\030\143" +
    "\031\135\047\127\001\002\000\040\014\uff8e\015\uff8e\017" +
    "\uff8e\022\uff8e\024\uff8e\025\uff8e\043\153\044\uff8e\045\uff8e" +
    "\046\uff8e\062\uff8e\074\uff8e\077\uff8e\110\uff8e\111\uff8e\001" +
    "\002\000\032\004\073\005\120\006\074\007\117\010\136" +
    "\011\107\012\071\013\053\021\075\030\143\031\135\047" +
    "\127\001\002\000\044\014\uff8c\015\uff8c\017\uff8c\020\155" +
    "\022\uff8c\024\uff8c\025\uff8c\042\156\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\062\uff8c\074\uff8c\077\uff8c\110\uff8c\111\uff8c" +
    "\001\002\000\032\004\073\005\120\006\074\007\117\010" +
    "\136\011\107\012\071\013\053\021\075\030\143\031\135" +
    "\047\127\001\002\000\032\004\073\005\120\006\074\007" +
    "\117\010\136\011\107\012\071\013\053\021\075\030\143" +
    "\031\135\047\127\001\002\000\054\014\uff89\015\uff89\017" +
    "\uff89\020\uff89\022\uff89\024\uff89\025\uff89\036\163\037\160" +
    "\040\161\041\162\042\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\062\uff89\074\uff89\077\uff89\110\uff89\111\uff89\001\002" +
    "\000\032\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\021\uff85\030\uff85\031\uff85\047\uff85" +
    "\001\002\000\032\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\021\uff84\030\uff84\031\uff84" +
    "\047\uff84\001\002\000\032\004\uff83\005\uff83\006\uff83\007" +
    "\uff83\010\uff83\011\uff83\012\uff83\013\uff83\021\uff83\030\uff83" +
    "\031\uff83\047\uff83\001\002\000\032\004\uff86\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\021\uff86" +
    "\030\uff86\031\uff86\047\uff86\001\002\000\032\004\073\005" +
    "\120\006\074\007\117\010\136\011\107\012\071\013\053" +
    "\021\075\030\143\031\135\047\127\001\002\000\060\014" +
    "\uff87\015\uff87\017\uff87\020\uff87\022\uff87\024\uff87\025\uff87" +
    "\030\166\031\167\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\062\uff87\074\uff87" +
    "\077\uff87\110\uff87\111\uff87\001\002\000\032\004\073\005" +
    "\120\006\074\007\117\010\136\011\107\012\071\013\053" +
    "\021\075\030\143\031\135\047\127\001\002\000\032\004" +
    "\073\005\120\006\074\007\117\010\136\011\107\012\071" +
    "\013\053\021\075\030\143\031\135\047\127\001\002\000" +
    "\070\014\uff80\015\uff80\017\uff80\020\uff80\022\uff80\024\uff80" +
    "\025\uff80\030\uff80\031\uff80\032\173\033\171\034\174\035" +
    "\172\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\046\uff80\062\uff80\074\uff80\077\uff80\110" +
    "\uff80\111\uff80\001\002\000\032\004\073\005\120\006\074" +
    "\007\117\010\136\011\107\012\071\013\053\021\075\030" +
    "\143\031\135\047\127\001\002\000\032\004\073\005\120" +
    "\006\074\007\117\010\136\011\107\012\071\013\053\021" +
    "\075\030\143\031\135\047\127\001\002\000\032\004\073" +
    "\005\120\006\074\007\117\010\136\011\107\012\071\013" +
    "\053\021\075\030\143\031\135\047\127\001\002\000\032" +
    "\004\073\005\120\006\074\007\117\010\136\011\107\012" +
    "\071\013\053\021\075\030\143\031\135\047\127\001\002" +
    "\000\070\014\uff7b\015\uff7b\017\uff7b\020\uff7b\022\uff7b\024" +
    "\uff7b\025\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\062\uff7b\074\uff7b\077\uff7b" +
    "\110\uff7b\111\uff7b\001\002\000\070\014\uff7e\015\uff7e\017" +
    "\uff7e\020\uff7e\022\uff7e\024\uff7e\025\uff7e\030\uff7e\031\uff7e" +
    "\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\062\uff7e\074\uff7e\077\uff7e\110\uff7e\111\uff7e\001\002\000" +
    "\070\014\uff7c\015\uff7c\017\uff7c\020\uff7c\022\uff7c\024\uff7c" +
    "\025\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\062\uff7c\074\uff7c\077\uff7c\110" +
    "\uff7c\111\uff7c\001\002\000\070\014\uff7d\015\uff7d\017\uff7d" +
    "\020\uff7d\022\uff7d\024\uff7d\025\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\062" +
    "\uff7d\074\uff7d\077\uff7d\110\uff7d\111\uff7d\001\002\000\070" +
    "\014\uff81\015\uff81\017\uff81\020\uff81\022\uff81\024\uff81\025" +
    "\uff81\030\uff81\031\uff81\032\173\033\171\034\174\035\172" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\062\uff81\074\uff81\077\uff81\110\uff81" +
    "\111\uff81\001\002\000\054\014\uff8a\015\uff8a\017\uff8a\020" +
    "\uff8a\022\uff8a\024\uff8a\025\uff8a\036\163\037\160\040\161" +
    "\041\162\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\062" +
    "\uff8a\074\uff8a\077\uff8a\110\uff8a\111\uff8a\001\002\000\040" +
    "\014\uff8f\015\uff8f\017\uff8f\022\uff8f\024\uff8f\025\uff8f\043" +
    "\153\044\uff8f\045\uff8f\046\uff8f\062\uff8f\074\uff8f\077\uff8f" +
    "\110\uff8f\111\uff8f\001\002\000\074\014\uff79\015\uff79\017" +
    "\uff79\020\uff79\022\uff79\023\123\024\uff79\025\uff79\027\122" +
    "\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\062\uff79\074\uff79\077\uff79\110\uff79\111" +
    "\uff79\001\002\000\034\004\073\005\120\006\074\007\117" +
    "\010\136\011\107\012\071\013\053\021\075\022\207\030" +
    "\143\031\135\047\127\001\002\000\006\015\210\022\211" +
    "\001\002\000\074\014\uff64\015\uff64\017\uff64\020\uff64\022" +
    "\uff64\023\uff64\024\uff64\025\uff64\027\uff64\030\uff64\031\uff64" +
    "\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64\037\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\062\uff64\074\uff64\077\uff64\110\uff64\111\uff64\001\002\000" +
    "\032\004\073\005\120\006\074\007\117\010\136\011\107" +
    "\012\071\013\053\021\075\030\143\031\135\047\127\001" +
    "\002\000\074\014\uff63\015\uff63\017\uff63\020\uff63\022\uff63" +
    "\023\uff63\024\uff63\025\uff63\027\uff63\030\uff63\031\uff63\032" +
    "\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63" +
    "\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63\062" +
    "\uff63\074\uff63\077\uff63\110\uff63\111\uff63\001\002\000\012" +
    "\015\uff95\022\uff95\024\uff95\025\uff95\001\002\000\074\014" +
    "\uff78\015\uff78\017\uff78\020\uff78\022\uff78\023\123\024\uff78" +
    "\025\uff78\027\122\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\062\uff78\074\uff78\077" +
    "\uff78\110\uff78\111\uff78\001\002\000\074\014\uff77\015\uff77" +
    "\017\uff77\020\uff77\022\uff77\023\123\024\uff77\025\uff77\027" +
    "\122\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044" +
    "\uff77\045\uff77\046\uff77\062\uff77\074\uff77\077\uff77\110\uff77" +
    "\111\uff77\001\002\000\076\014\uff65\015\uff65\017\uff65\020" +
    "\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65" +
    "\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036" +
    "\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65" +
    "\045\uff65\046\uff65\062\uff65\074\uff65\077\uff65\110\uff65\111" +
    "\uff65\001\002\000\076\014\uff66\015\uff66\017\uff66\020\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66" +
    "\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045" +
    "\uff66\046\uff66\062\uff66\074\uff66\077\uff66\110\uff66\111\uff66" +
    "\001\002\000\032\004\073\005\120\006\074\007\117\010" +
    "\136\011\107\012\071\013\053\021\075\030\143\031\135" +
    "\047\127\001\002\000\006\015\210\022\221\001\002\000" +
    "\004\014\uff99\001\002\000\070\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\021\uffb1\030" +
    "\uffb1\031\uffb1\047\uffb1\067\uffb1\072\uffb1\073\uffb1\075\uffb1" +
    "\076\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105" +
    "\uffb1\106\uffb1\107\uffb1\112\uffb1\113\uffb1\001\002\000\070" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\021\uffb2\030\uffb2\031\uffb2\047\uffb2\067\uffb2" +
    "\072\uffb2\073\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\112\uffb2" +
    "\113\uffb2\001\002\000\004\026\226\001\002\000\016\015" +
    "\uffac\021\205\023\uff72\026\uffac\027\uff72\077\uffac\001\002" +
    "\000\032\004\073\005\120\006\074\007\117\010\136\011" +
    "\107\012\071\013\053\021\075\030\143\031\135\047\127" +
    "\001\002\000\006\110\230\111\231\001\002\000\032\004" +
    "\073\005\120\006\074\007\117\010\136\011\107\012\071" +
    "\013\053\021\075\030\143\031\135\047\127\001\002\000" +
    "\032\004\073\005\120\006\074\007\117\010\136\011\107" +
    "\012\071\013\053\021\075\030\143\031\135\047\127\001" +
    "\002\000\004\077\233\001\002\000\054\004\073\005\120" +
    "\006\074\007\117\010\103\011\107\012\071\013\053\021" +
    "\075\066\044\072\105\073\072\076\054\100\114\101\100" +
    "\102\066\104\076\105\051\107\111\112\115\113\050\001" +
    "\002\000\070\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\021\uffc1\030\uffc1\031\uffc1\047" +
    "\uffc1\067\uffc1\072\uffc1\073\uffc1\075\uffc1\076\uffc1\100\uffc1" +
    "\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107" +
    "\uffc1\112\uffc1\113\uffc1\001\002\000\072\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\237\021\uffc2\030\uffc2\031\uffc2\047\uffc2\067\uffc2\072\uffc2" +
    "\073\uffc2\075\uffc2\076\uffc2\100\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\112\uffc2\113\uffc2" +
    "\001\002\000\070\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\021\uff9a\030\uff9a\031\uff9a" +
    "\047\uff9a\067\uff9a\072\uff9a\073\uff9a\075\uff9a\076\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a" +
    "\107\uff9a\112\uff9a\113\uff9a\001\002\000\070\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\021\uffc3\030\uffc3\031\uffc3\047\uffc3\067\uffc3\072\uffc3\073" +
    "\uffc3\075\uffc3\076\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\112\uffc3\113\uffc3\001" +
    "\002\000\004\077\241\001\002\000\054\004\073\005\120" +
    "\006\074\007\117\010\103\011\107\012\071\013\053\021" +
    "\075\066\044\072\105\073\072\076\054\100\114\101\100" +
    "\102\066\104\076\105\051\107\111\112\115\113\050\001" +
    "\002\000\070\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\021\uff9b\030\uff9b\031\uff9b\047" +
    "\uff9b\067\uff9b\072\uff9b\073\uff9b\075\uff9b\076\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107" +
    "\uff9b\112\uff9b\113\uff9b\001\002\000\070\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\021" +
    "\uffb6\030\uffb6\031\uffb6\047\uffb6\067\uffb6\072\uffb6\073\uffb6" +
    "\075\uffb6\076\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104" +
    "\uffb6\105\uffb6\106\uffb6\107\uffb6\112\uffb6\113\uffb6\001\002" +
    "\000\032\004\073\005\120\006\074\007\117\010\136\011" +
    "\107\012\071\013\053\021\075\030\143\031\135\047\127" +
    "\001\002\000\004\014\uffa9\001\002\000\004\077\247\001" +
    "\002\000\054\004\073\005\120\006\074\007\117\010\103" +
    "\011\107\012\071\013\053\021\075\066\044\072\105\073" +
    "\072\076\054\100\114\101\100\102\066\104\076\105\051" +
    "\107\111\112\115\113\050\001\002\000\070\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\021\uff9d\030\uff9d\031\uff9d\047\uff9d\067\uff9d\072\uff9d\073" +
    "\uff9d\075\uff9d\076\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\107\uff9d\112\uff9d\113\uff9d\001" +
    "\002\000\004\022\252\001\002\000\074\014\uff67\015\uff67" +
    "\017\uff67\020\uff67\022\uff67\023\uff67\024\uff67\025\uff67\027" +
    "\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044" +
    "\uff67\045\uff67\046\uff67\062\uff67\074\uff67\077\uff67\110\uff67" +
    "\111\uff67\001\002\000\004\074\254\001\002\000\054\004" +
    "\073\005\120\006\074\007\117\010\103\011\107\012\071" +
    "\013\053\021\075\066\044\072\105\073\072\076\054\100" +
    "\114\101\100\102\066\104\076\105\051\107\111\112\115" +
    "\113\050\001\002\000\070\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\021\uffa4\030\uffa4" +
    "\031\uffa4\047\uffa4\067\uffa4\072\uffa4\073\uffa4\075\256\076" +
    "\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\112\uffa4\113\uffa4\001\002\000\054\004" +
    "\073\005\120\006\074\007\117\010\103\011\107\012\071" +
    "\013\053\021\075\066\044\072\105\073\072\076\054\100" +
    "\114\101\100\102\066\104\076\105\051\107\111\112\115" +
    "\113\050\001\002\000\070\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\021\uffa5\030\uffa5" +
    "\031\uffa5\047\uffa5\067\uffa5\072\uffa5\073\uffa5\075\uffa5\076" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\106\uffa5\107\uffa5\112\uffa5\113\uffa5\001\002\000\070\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\021\uffbe\030\uffbe\031\uffbe\047\uffbe\067\uffbe\072" +
    "\uffbe\073\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\112\uffbe\113" +
    "\uffbe\001\002\000\070\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\021\uffb4\030\uffb4\031" +
    "\uffb4\047\uffb4\067\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4" +
    "\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106" +
    "\uffb4\107\uffb4\112\uffb4\113\uffb4\001\002\000\004\062\263" +
    "\001\002\000\032\004\073\005\120\006\074\007\117\010" +
    "\136\011\107\012\071\013\053\021\075\030\143\031\135" +
    "\047\127\001\002\000\006\015\210\025\301\001\002\000" +
    "\040\004\073\005\120\006\074\007\117\010\136\011\107" +
    "\012\071\013\053\021\075\030\143\031\135\047\127\067" +
    "\272\075\267\103\271\001\002\000\040\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\021" +
    "\uff9f\030\uff9f\031\uff9f\047\uff9f\067\uff9f\075\uff9f\103\uff9f" +
    "\001\002\000\004\025\276\001\002\000\040\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\021\uffa0\030\uffa0\031\uffa0\047\uffa0\067\uffa0\075\uffa0\103" +
    "\uffa0\001\002\000\004\025\273\001\002\000\072\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\021\uffa1\030\uffa1\031\uffa1\047\uffa1\067\uffa1" +
    "\072\uffa1\073\uffa1\075\uffa1\076\uffa1\100\uffa1\101\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\112\uffa1" +
    "\113\uffa1\001\002\000\054\004\073\005\120\006\074\007" +
    "\117\010\103\011\107\012\071\013\053\021\075\066\044" +
    "\072\105\073\072\076\054\100\114\101\100\102\066\104" +
    "\076\105\051\107\111\112\115\113\050\001\002\000\004" +
    "\067\275\001\002\000\072\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\021\uffa3" +
    "\030\uffa3\031\uffa3\047\uffa3\067\uffa3\072\uffa3\073\uffa3\075" +
    "\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\106\uffa3\107\uffa3\112\uffa3\113\uffa3\001\002\000" +
    "\054\004\073\005\120\006\074\007\117\010\103\011\107" +
    "\012\071\013\053\021\075\066\044\072\105\073\072\076" +
    "\054\100\114\101\100\102\066\104\076\105\051\107\111" +
    "\112\115\113\050\001\002\000\004\067\300\001\002\000" +
    "\072\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\021\uffa2\030\uffa2\031\uffa2\047" +
    "\uffa2\067\uffa2\072\uffa2\073\uffa2\075\uffa2\076\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107" +
    "\uffa2\112\uffa2\113\uffa2\001\002\000\054\004\073\005\120" +
    "\006\074\007\117\010\103\011\107\012\071\013\053\021" +
    "\075\066\044\072\105\073\072\076\054\100\114\101\100" +
    "\102\066\104\076\105\051\107\111\112\115\113\050\001" +
    "\002\000\040\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\021\uff9e\030\uff9e\031\uff9e\047" +
    "\uff9e\067\uff9e\075\uff9e\103\uff9e\001\002\000\070\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\021\uffba\030\uffba\031\uffba\047\uffba\067\uffba\072\uffba" +
    "\073\uffba\075\uffba\076\uffba\100\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\105\uffba\106\uffba\107\uffba\112\uffba\113\uffba" +
    "\001\002\000\070\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\021\uffbb\030\uffbb\031\uffbb" +
    "\047\uffbb\067\uffbb\072\uffbb\073\uffbb\075\uffbb\076\uffbb\100" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb" +
    "\107\uffbb\112\uffbb\113\uffbb\001\002\000\102\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\021\uffc5\027\uffc5\030\uffc5\031\uffc5\047\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\070\uffc5\072\uffc5\073\uffc5\075\uffc5" +
    "\076\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\112\uffc5\113\uffc5\001\002\000\056" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\021\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\104\uffc0\105\uffc0\106\uffc0\107" +
    "\uffc0\112\uffc0\113\uffc0\001\002\000\006\015\312\077\311" +
    "\001\002\000\006\015\uffad\077\uffad\001\002\000\054\004" +
    "\073\005\120\006\074\007\117\010\103\011\107\012\071" +
    "\013\053\021\075\067\314\072\105\073\072\076\054\100" +
    "\114\101\100\102\066\104\076\105\051\107\111\112\115" +
    "\113\050\001\002\000\024\004\073\005\120\006\074\007" +
    "\117\010\225\011\107\012\071\013\053\021\075\001\002" +
    "\000\006\015\uffae\077\uffae\001\002\000\072\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\021\uffaf\030\uffaf\031\uffaf\047\uffaf\067\uffaf\072" +
    "\uffaf\073\uffaf\075\uffaf\076\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\112\uffaf\113" +
    "\uffaf\001\002\000\054\004\073\005\120\006\074\007\117" +
    "\010\103\011\107\012\071\013\053\021\075\067\316\072" +
    "\105\073\072\076\054\100\114\101\100\102\066\104\076" +
    "\105\051\107\111\112\115\113\050\001\002\000\072\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\021\uffb0\030\uffb0\031\uffb0\047\uffb0\067" +
    "\uffb0\072\uffb0\073\uffb0\075\uffb0\076\uffb0\100\uffb0\101\uffb0" +
    "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\112" +
    "\uffb0\113\uffb0\001\002\000\070\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\021\uffb9\030" +
    "\uffb9\031\uffb9\047\uffb9\067\uffb9\072\uffb9\073\uffb9\075\uffb9" +
    "\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\112\uffb9\113\uffb9\001\002\000\054" +
    "\004\073\005\120\006\074\007\117\010\103\011\107\012" +
    "\071\013\053\021\075\072\105\073\072\076\054\100\114" +
    "\101\100\102\066\104\076\105\051\106\321\107\111\112" +
    "\115\113\050\001\002\000\032\004\073\005\120\006\074" +
    "\007\117\010\136\011\107\012\071\013\053\021\075\030" +
    "\143\031\135\047\127\001\002\000\004\014\uff9c\001\002" +
    "\000\032\004\073\005\120\006\074\007\117\010\136\011" +
    "\107\012\071\013\053\021\075\030\143\031\135\047\127" +
    "\001\002\000\006\015\210\022\325\001\002\000\004\014" +
    "\uff98\001\002\000\070\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\021\uffbc\030\uffbc\031" +
    "\uffbc\047\uffbc\067\uffbc\072\uffbc\073\uffbc\075\uffbc\076\uffbc" +
    "\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106" +
    "\uffbc\107\uffbc\112\uffbc\113\uffbc\001\002\000\006\014\u010e" +
    "\022\u010d\001\002\000\004\010\334\001\002\000\006\014" +
    "\uffcc\025\uffcc\001\002\000\006\015\335\025\336\001\002" +
    "\000\006\014\uffc9\022\uffc9\001\002\000\012\015\ufff8\020" +
    "\ufff8\022\ufff8\025\ufff8\001\002\000\004\010\u0109\001\002" +
    "\000\046\004\073\005\120\006\074\007\117\010\346\011" +
    "\107\012\071\013\053\030\352\031\344\050\337\051\354" +
    "\052\351\053\347\054\340\055\350\061\355\071\341\001" +
    "\002\000\010\014\ufff7\020\ufff7\022\ufff7\001\002\000\010" +
    "\014\ufff3\020\ufff3\022\ufff3\001\002\000\004\010\334\001" +
    "\002\000\006\014\uffc8\022\uffc8\001\002\000\012\014\uffe5" +
    "\016\uffe5\020\uffe5\022\uffe5\001\002\000\026\004\073\005" +
    "\120\006\074\007\117\010\372\011\107\012\071\013\053" +
    "\030\352\031\344\001\002\000\010\014\uffea\020\uffea\022" +
    "\uffea\001\002\000\012\014\uffe8\016\uffe4\020\uffe8\022\uffe8" +
    "\001\002\000\010\014\ufff4\020\ufff4\022\ufff4\001\002\000" +
    "\010\014\ufff2\020\ufff2\022\ufff2\001\002\000\010\014\ufff5" +
    "\020\ufff5\022\ufff5\001\002\000\026\004\073\005\120\006" +
    "\074\007\117\010\372\011\107\012\071\013\053\030\352" +
    "\031\344\001\002\000\004\016\371\001\002\000\010\014" +
    "\ufff6\020\ufff6\022\ufff6\001\002\000\004\023\356\001\002" +
    "\000\032\004\073\005\120\006\074\007\117\010\136\011" +
    "\107\012\071\013\053\021\075\030\143\031\135\047\127" +
    "\001\002\000\004\017\367\001\002\000\006\015\363\024" +
    "\362\001\002\000\006\015\uffe0\024\uffe0\001\002\000\004" +
    "\062\365\001\002\000\032\004\073\005\120\006\074\007" +
    "\117\010\136\011\107\012\071\013\053\021\075\030\143" +
    "\031\135\047\127\001\002\000\006\015\uffe1\024\uffe1\001" +
    "\002\000\046\004\073\005\120\006\074\007\117\010\346" +
    "\011\107\012\071\013\053\030\352\031\344\050\337\051" +
    "\354\052\351\053\347\054\340\055\350\061\355\071\341" +
    "\001\002\000\010\014\uffe9\020\uffe9\022\uffe9\001\002\000" +
    "\032\004\073\005\120\006\074\007\117\010\136\011\107" +
    "\012\071\013\053\021\075\030\143\031\135\047\127\001" +
    "\002\000\006\015\uffdf\024\uffdf\001\002\000\026\004\073" +
    "\005\120\006\074\007\117\010\372\011\107\012\071\013" +
    "\053\030\352\031\344\001\002\000\012\014\uffe4\016\uffe4" +
    "\020\uffe4\022\uffe4\001\002\000\010\014\uffe7\020\uffe7\022" +
    "\uffe7\001\002\000\012\014\uffe3\016\uffe3\020\uffe3\022\uffe3" +
    "\001\002\000\012\014\uffe2\016\uffe2\020\uffe2\022\uffe2\001" +
    "\002\000\016\010\uffdb\063\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\001\002\000\006\010\334\067\u0108\001\002\000" +
    "\006\015\335\025\u0101\001\002\000\046\004\073\005\120" +
    "\006\074\007\117\010\346\011\107\012\071\013\053\030" +
    "\352\031\344\050\337\051\354\052\351\053\347\054\340" +
    "\055\350\061\355\071\341\001\002\000\006\014\u0104\020" +
    "\u0103\001\002\000\032\004\073\005\120\006\074\007\117" +
    "\010\136\011\107\012\071\013\053\021\075\030\143\031" +
    "\135\047\127\001\002\000\016\010\uffda\063\uffda\065\uffda" +
    "\066\uffda\067\uffda\070\uffda\001\002\000\004\014\u0106\001" +
    "\002\000\016\010\uffd9\063\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\070\uffd9\001\002\000\016\010\uffdc\063\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\001\002\000\010\014\uffe6\020\uffe6" +
    "\022\uffe6\001\002\000\012\015\ufff9\020\ufff9\022\ufff9\025" +
    "\ufff9\001\002\000\006\015\335\025\u010b\001\002\000\046" +
    "\004\073\005\120\006\074\007\117\010\346\011\107\012" +
    "\071\013\053\030\352\031\344\050\337\051\354\052\351" +
    "\053\347\054\340\055\350\061\355\071\341\001\002\000" +
    "\006\014\uffc7\022\uffc7\001\002\000\006\014\uffcd\025\uffcd" +
    "\001\002\000\006\010\334\063\330\001\002\000\006\014" +
    "\uffca\022\uffca\001\002\000\006\021\037\025\uffcb\001\002" +
    "\000\004\025\u0112\001\002\000\046\004\073\005\120\006" +
    "\074\007\117\010\346\011\107\012\071\013\053\030\352" +
    "\031\344\050\337\051\354\052\351\053\347\054\340\055" +
    "\350\061\355\071\341\001\002\000\004\014\u0114\001\002" +
    "\000\012\063\024\065\uffdd\066\uffdd\070\uffdd\001\002\000" +
    "\010\065\031\066\uffd6\070\032\001\002\000\004\066\044" +
    "\001\002\000\012\014\uffce\065\uffce\066\uffce\070\uffce\001" +
    "\002\000\010\065\uffd0\066\uffd0\070\uffd0\001\002\000\004" +
    "\027\u011a\001\002\000\004\002\uffff\001\002\000\010\065" +
    "\uffd2\066\uffd2\070\uffd2\001\002\000\012\010\334\065\uffde" +
    "\066\uffde\070\uffde\001\002\000\014\010\334\063\uffd8\065" +
    "\uffd8\066\uffd8\070\uffd8\001\002\000\016\010\334\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\070\ufff1\001\002\000\006\015" +
    "\335\020\u0121\001\002\000\016\010\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\070\uffee\001\002\000\050\004\073\005" +
    "\120\006\074\007\117\010\346\011\107\012\071\013\053" +
    "\021\u0122\030\352\031\344\050\337\051\354\052\351\053" +
    "\347\054\340\055\350\061\355\071\341\001\002\000\004" +
    "\010\334\001\002\000\004\014\uffec\001\002\000\004\014" +
    "\u0125\001\002\000\016\010\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\070\uffed\001\002\000\006\015\335\022\u0127\001" +
    "\002\000\004\014\uffeb\001\002\000\016\010\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\070\uffef\001\002\000\004\014" +
    "\u012a\001\002\000\020\057\ufffe\060\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\070\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\004\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\020\001" +
    "\001\000\004\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\u011e\012\u011d\013\u011f\001\001\000\004" +
    "\024\022\001\001\000\010\007\377\022\u011c\023\375\001" +
    "\001\000\004\021\024\001\001\000\010\007\377\022\u011b" +
    "\023\375\001\001\000\014\025\026\026\033\027\032\030" +
    "\025\034\027\001\001\000\002\001\001\000\004\035\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\034\030\025\034\027" +
    "\001\001\000\002\001\001\000\004\031\037\001\001\000" +
    "\010\007\331\032\326\033\332\001\001\000\002\001\001" +
    "\000\004\021\041\001\001\000\014\025\042\026\033\027" +
    "\032\030\025\034\027\001\001\000\004\035\044\001\001" +
    "\000\060\036\054\037\055\041\067\042\046\044\100\045" +
    "\056\046\063\047\051\050\101\051\107\054\076\055\066" +
    "\056\057\057\111\060\112\074\115\075\060\076\103\077" +
    "\120\100\062\101\064\102\105\103\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\036\317\037\055\041\067\042\046\044\100" +
    "\045\056\046\063\047\051\050\101\051\107\054\076\055" +
    "\066\056\057\057\111\060\112\074\115\075\060\076\103" +
    "\077\120\100\062\101\064\102\105\103\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\043\306\044\307" +
    "\074\115\075\060\076\103\077\120\100\062\101\064\102" +
    "\105\103\127\001\001\000\056\037\305\041\067\042\046" +
    "\044\100\045\056\046\063\047\051\050\101\051\107\054" +
    "\076\055\066\056\057\057\111\060\112\074\115\075\060" +
    "\076\103\077\120\100\062\101\064\102\105\103\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\062\261\063\143" +
    "\064\125\065\141\066\136\067\123\071\133\072\131\073" +
    "\132\074\140\075\060\076\103\077\120\100\062\101\144" +
    "\102\130\103\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\062\252\063\143\064\125" +
    "\065\141\066\136\067\123\071\133\072\131\073\132\074" +
    "\140\075\060\076\103\077\120\100\062\101\144\102\130" +
    "\103\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\062\250\063\143\064\125\065\141\066\136\067\123" +
    "\071\133\072\131\073\132\074\140\075\060\076\103\077" +
    "\120\100\062\101\144\102\130\103\127\001\001\000\044" +
    "\062\245\063\143\064\125\065\141\066\136\067\123\071" +
    "\133\072\131\073\132\074\140\075\060\076\103\077\120" +
    "\100\062\101\144\102\130\103\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\044\223\074\115\075\060\076\103\077\120\100\062\101" +
    "\064\102\105\103\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\061\124\062\137\063\143\064" +
    "\125\065\141\066\136\067\123\071\133\072\131\073\132" +
    "\074\140\075\060\076\103\077\120\100\062\101\144\102" +
    "\130\103\127\001\001\000\004\070\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\074\213\075\060\076" +
    "\103\077\120\100\062\101\144\102\130\103\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\074\212\075\060" +
    "\076\103\077\120\100\062\101\144\102\130\103\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\074\203\075" +
    "\060\076\103\077\120\100\062\101\144\102\130\103\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\064" +
    "\125\065\146\066\136\067\123\071\133\072\131\073\132" +
    "\074\140\075\060\076\103\077\120\100\062\101\144\102" +
    "\130\103\127\001\001\000\002\001\001\000\036\064\202" +
    "\066\136\067\123\071\133\072\131\073\132\074\140\075" +
    "\060\076\103\077\120\100\062\101\144\102\130\103\127" +
    "\001\001\000\036\064\151\066\136\067\123\071\133\072" +
    "\131\073\132\074\140\075\060\076\103\077\120\100\062" +
    "\101\144\102\130\103\127\001\001\000\002\001\001\000" +
    "\034\066\153\067\123\071\133\072\131\073\132\074\140" +
    "\075\060\076\103\077\120\100\062\101\144\102\130\103" +
    "\127\001\001\000\002\001\001\000\032\067\201\071\133" +
    "\072\131\073\132\074\140\075\060\076\103\077\120\100" +
    "\062\101\144\102\130\103\127\001\001\000\032\067\156" +
    "\071\133\072\131\073\132\074\140\075\060\076\103\077" +
    "\120\100\062\101\144\102\130\103\127\001\001\000\004" +
    "\070\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\071\164\072\131" +
    "\073\132\074\140\075\060\076\103\077\120\100\062\101" +
    "\144\102\130\103\127\001\001\000\002\001\001\000\026" +
    "\072\200\073\132\074\140\075\060\076\103\077\120\100" +
    "\062\101\144\102\130\103\127\001\001\000\026\072\167" +
    "\073\132\074\140\075\060\076\103\077\120\100\062\101" +
    "\144\102\130\103\127\001\001\000\002\001\001\000\024" +
    "\073\177\074\140\075\060\076\103\077\120\100\062\101" +
    "\144\102\130\103\127\001\001\000\024\073\176\074\140" +
    "\075\060\076\103\077\120\100\062\101\144\102\130\103" +
    "\127\001\001\000\024\073\175\074\140\075\060\076\103" +
    "\077\120\100\062\101\144\102\130\103\127\001\001\000" +
    "\024\073\174\074\140\075\060\076\103\077\120\100\062" +
    "\101\144\102\130\103\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\061\205\062\137\063\143\064\125" +
    "\065\141\066\136\067\123\071\133\072\131\073\132\074" +
    "\140\075\060\076\103\077\120\100\062\101\144\102\130" +
    "\103\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\062\211\063\143\064\125\065\141\066\136\067\123" +
    "\071\133\072\131\073\132\074\140\075\060\076\103\077" +
    "\120\100\062\101\144\102\130\103\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\061\217" +
    "\062\137\063\143\064\125\065\141\066\136\067\123\071" +
    "\133\072\131\073\132\074\140\075\060\076\103\077\120" +
    "\100\062\101\144\102\130\103\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\062\226\063" +
    "\143\064\125\065\141\066\136\067\123\071\133\072\131" +
    "\073\132\074\140\075\060\076\103\077\120\100\062\101" +
    "\144\102\130\103\127\001\001\000\002\001\001\000\044" +
    "\062\237\063\143\064\125\065\141\066\136\067\123\071" +
    "\133\072\131\073\132\074\140\075\060\076\103\077\120" +
    "\100\062\101\144\102\130\103\127\001\001\000\044\062" +
    "\231\063\143\064\125\065\141\066\136\067\123\071\133" +
    "\072\131\073\132\074\140\075\060\076\103\077\120\100" +
    "\062\101\144\102\130\103\127\001\001\000\002\001\001" +
    "\000\062\035\234\037\233\040\235\041\067\042\046\044" +
    "\100\045\056\046\063\047\051\050\101\051\107\054\076" +
    "\055\066\056\057\057\111\060\112\074\115\075\060\076" +
    "\103\077\120\100\062\101\064\102\105\103\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\035\234\037\233" +
    "\040\241\041\067\042\046\044\100\045\056\046\063\047" +
    "\051\050\101\051\107\054\076\055\066\056\057\057\111" +
    "\060\112\074\115\075\060\076\103\077\120\100\062\101" +
    "\064\102\105\103\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\062\244\063\143\064\125\065\141\066" +
    "\136\067\123\071\133\072\131\073\132\074\140\075\060" +
    "\076\103\077\120\100\062\101\144\102\130\103\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\035\234" +
    "\037\233\040\247\041\067\042\046\044\100\045\056\046" +
    "\063\047\051\050\101\051\107\054\076\055\066\056\057" +
    "\057\111\060\112\074\115\075\060\076\103\077\120\100" +
    "\062\101\064\102\105\103\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\035\234\037\233\040\254\041\067\042\046\044\100" +
    "\045\056\046\063\047\051\050\101\051\107\054\076\055" +
    "\066\056\057\057\111\060\112\074\115\075\060\076\103" +
    "\077\120\100\062\101\064\102\105\103\061\001\001\000" +
    "\002\001\001\000\062\035\234\037\233\040\256\041\067" +
    "\042\046\044\100\045\056\046\063\047\051\050\101\051" +
    "\107\054\076\055\066\056\057\057\111\060\112\074\115" +
    "\075\060\076\103\077\120\100\062\101\064\102\105\103" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\052\264\053\265\061" +
    "\263\062\137\063\143\064\125\065\141\066\136\067\123" +
    "\071\133\072\131\073\132\074\140\075\060\076\103\077" +
    "\120\100\062\101\144\102\130\103\127\001\001\000\002" +
    "\001\001\000\050\053\267\061\263\062\137\063\143\064" +
    "\125\065\141\066\136\067\123\071\133\072\131\073\132" +
    "\074\140\075\060\076\103\077\120\100\062\101\144\102" +
    "\130\103\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\035\234\037\233\040\273\041\067\042\046\044\100" +
    "\045\056\046\063\047\051\050\101\051\107\054\076\055" +
    "\066\056\057\057\111\060\112\074\115\075\060\076\103" +
    "\077\120\100\062\101\064\102\105\103\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\035\234\037\233" +
    "\040\276\041\067\042\046\044\100\045\056\046\063\047" +
    "\051\050\101\051\107\054\076\055\066\056\057\057\111" +
    "\060\112\074\115\075\060\076\103\077\120\100\062\101" +
    "\064\102\105\103\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\035\234\037\233\040\301\041\067\042" +
    "\046\044\100\045\056\046\063\047\051\050\101\051\107" +
    "\054\076\055\066\056\057\057\111\060\112\074\115\075" +
    "\060\076\103\077\120\100\062\101\064\102\105\103\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\036\314\037\055\041\067\042" +
    "\046\044\100\045\056\046\063\047\051\050\101\051\107" +
    "\054\076\055\066\056\057\057\111\060\112\074\115\075" +
    "\060\076\103\077\120\100\062\101\064\102\105\103\061" +
    "\001\001\000\024\044\312\074\115\075\060\076\103\077" +
    "\120\100\062\101\064\102\105\103\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\037\305\041\067\042" +
    "\046\044\100\045\056\046\063\047\051\050\101\051\107" +
    "\054\076\055\066\056\057\057\111\060\112\074\115\075" +
    "\060\076\103\077\120\100\062\101\064\102\105\103\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\037" +
    "\305\041\067\042\046\044\100\045\056\046\063\047\051" +
    "\050\101\051\107\054\076\055\066\056\057\057\111\060" +
    "\112\074\115\075\060\076\103\077\120\100\062\101\064" +
    "\102\105\103\061\001\001\000\044\062\321\063\143\064" +
    "\125\065\141\066\136\067\123\071\133\072\131\073\132" +
    "\074\140\075\060\076\103\077\120\100\062\101\144\102" +
    "\130\103\127\001\001\000\002\001\001\000\046\061\323" +
    "\062\137\063\143\064\125\065\141\066\136\067\123\071" +
    "\133\072\131\073\132\074\140\075\060\076\103\077\120" +
    "\100\062\101\144\102\130\103\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\344\015\341\016\352\076\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\377\022\376" +
    "\023\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\374\076\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\373\076\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\017\357\020" +
    "\360\062\356\063\143\064\125\065\141\066\136\067\123" +
    "\071\133\072\131\073\132\074\140\075\060\076\103\077" +
    "\120\100\062\101\144\102\130\103\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\020\363\062\356\063\143\064\125\065\141" +
    "\066\136\067\123\071\133\072\131\073\132\074\140\075" +
    "\060\076\103\077\120\100\062\101\144\102\130\103\127" +
    "\001\001\000\002\001\001\000\012\010\344\015\365\016" +
    "\352\076\342\001\001\000\002\001\001\000\044\062\367" +
    "\063\143\064\125\065\141\066\136\067\123\071\133\072" +
    "\131\073\132\074\140\075\060\076\103\077\120\100\062" +
    "\101\144\102\130\103\127\001\001\000\002\001\001\000" +
    "\006\016\372\076\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\377\023\u0106\001\001\000\002\001\001" +
    "\000\012\010\344\015\u0101\016\352\076\342\001\001\000" +
    "\002\001\001\000\044\062\u0104\063\143\064\125\065\141" +
    "\066\136\067\123\071\133\072\131\073\132\074\140\075" +
    "\060\076\103\077\120\100\062\101\144\102\130\103\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\344\015\u010b\016\352\076" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\331\033\u010e\001\001\000\002\001\001\000\004\031" +
    "\u0110\001\001\000\002\001\001\000\012\010\344\015\u0112" +
    "\016\352\076\342\001\001\000\002\001\001\000\004\021" +
    "\u0114\001\001\000\014\025\u0115\026\033\027\032\030\025" +
    "\034\027\001\001\000\004\035\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\377\023\u0106\001\001\000" +
    "\006\007\377\023\u0106\001\001\000\006\007\u011e\013\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\344\014\u0123\015\u0122\016\352\076\342\001\001\000\004" +
    "\007\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private AST ast;
	
	public AST getAST(){
		return ast;
	}
	
        private ArrayList<ErrorC> errores = new ArrayList<>();

        public ArrayList<ErrorC> getErrores(){
            return this.errores;
        }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
                ErrorC error = new ErrorC("Sintáctico", s.left, s.right, "Identificador " +s.value + " no reconocido.");
                this.errores.add(error);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
                ErrorC error = new ErrorC("Sintáctico", s.left, s.right, "Identificador " +s.value + " no reconocido.");
                this.errores.add(error);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            parser.ast = a; 
            System.out.println("DOCUMENTO OK"); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROGRAM_NAME USES TYPEDEF CONSTDEF VARDEF PROCEDUREDEF BLOQUE punto 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		ArrayList<Use> b = (ArrayList<Use>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<TipoDef> c = (ArrayList<TipoDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<VarDef> d = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<VarDef> e = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Metodo> f = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque g = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AST(a, b, c, d, e, f, g.getSentencias()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM_NAME ::= program_ id puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM_NAME",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= uses_ USES_LIST puntoycoma 
            {
              ArrayList<Use> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Use> a = (ArrayList<Use>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // USES ::= 
            {
              ArrayList<Use> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // USES_LIST ::= USES_LIST coma id 
            {
              ArrayList<Use> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Use> a = (ArrayList<Use>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(new Use(b, bleft, bright));
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USES_LIST",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // USES_LIST ::= id 
            {
              ArrayList<Use> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(new Use(a, aleft, aright));
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USES_LIST",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ID_LIST ::= ID_LIST coma id 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_LIST",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ID_LIST ::= id 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_LIST",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE_PRIMITIVE ::= char_ 
            {
              Type RESULT =null;
		 RESULT = Type.CHAR; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE_PRIMITIVE ::= integer_ 
            {
              Type RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_PRIMITIVE ::= real_ 
            {
              Type RESULT =null;
		 RESULT = Type.REAL; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_PRIMITIVE ::= string_ 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE_PRIMITIVE ::= word_ 
            {
              Type RESULT =null;
		 RESULT = Type.WORD; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE_PRIMITIVE ::= boolean_ 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_PRIMITIVE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPEDEF ::= type_ TYPE_LIST 
            {
              ArrayList<TipoDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<TipoDef> a = (ArrayList<TipoDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPEDEF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPEDEF ::= 
            {
              ArrayList<TipoDef> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPEDEF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE_LIST ::= TYPE_LIST TYPE 
            {
              ArrayList<TipoDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<TipoDef> a = (ArrayList<TipoDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TipoDef b = (TipoDef)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE_LIST ::= TYPE 
            {
              ArrayList<TipoDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TipoDef a = (TipoDef)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= ID_LIST igual TYPE_VALUE puntoycoma 
            {
              TipoDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TipoDef(a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE_VALUE ::= TYPE_SPECIFIER 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_VALUE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE_VALUE ::= parIzquierda ID_LIST parDerecha 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Tipo(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_VALUE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE_SPECIFIER ::= TYPE_PRIMITIVE 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE_SPECIFIER ::= array_ corcheteIzquierda DIM_LIST corcheteDerecha of_ TYPE_SPECIFIER 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Dimension> a = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPE_SPECIFIER ::= id 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TYPE_SPECIFIER ::= LIMIT_VAL puntos3 LIMIT_VAL 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPE_SPECIFIER ::= record_ VAR_LIST end_ 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<VarDef> a = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Tipo(a, Type.RECORD); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_SPECIFIER",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LIMIT_VAL ::= LITERAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMIT_VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LIMIT_VAL ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMIT_VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIMIT_VAL ::= mas LIMIT_VAL 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMIT_VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIMIT_VAL ::= menos LIMIT_VAL 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Unario(a, Operador.RESTA, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMIT_VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIM_LIST ::= DIM_LIST coma DIM 
            {
              ArrayList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Dimension> a = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension b = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM_LIST",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIM_LIST ::= DIM 
            {
              ArrayList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension a = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM_LIST",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DIM ::= EXPRESSION puntos2 EXPRESSION 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARDEF ::= var_ VAR_LIST 
            {
              ArrayList<VarDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<VarDef> a = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARDEF",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARDEF ::= 
            {
              ArrayList<VarDef> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARDEF",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VAR_LIST ::= VAR_LIST VAR 
            {
              ArrayList<VarDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<VarDef> a = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		VarDef b = (VarDef)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR_LIST",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VAR_LIST ::= VAR 
            {
              ArrayList<VarDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		VarDef a = (VarDef)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR_LIST",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VAR ::= ID_LIST dospuntos TYPE_SPECIFIER puntoycoma 
            {
              VarDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new VarDef(a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VAR ::= ID_LIST dospuntos TYPE_SPECIFIER igual EXPRESSION puntoycoma 
            {
              VarDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new VarDef(a, c, d, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONSTDEF ::= const_ VAR_LIST 
            {
              ArrayList<VarDef> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<VarDef> a = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTDEF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONSTDEF ::= 
            {
              ArrayList<VarDef> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTDEF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PROCEDUREDEF ::= 
            {
              ArrayList<Metodo> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCEDUREDEF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PROCEDUREDEF ::= METHOD_LIST 
            {
              ArrayList<Metodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Metodo> a = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCEDUREDEF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METHOD_LIST ::= METHOD_LIST METHOD 
            {
              ArrayList<Metodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Metodo> a = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Metodo b = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD_LIST ::= METHOD 
            {
              ArrayList<Metodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD ::= FUNDEF puntoycoma 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD ::= FUNDEF 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD ::= PROCDEF puntoycoma 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD ::= PROCDEF 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METHOD",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNDEF ::= function_ id PARAMETERS dospuntos TYPE_SPECIFIER puntoycoma VARDEF PROCEDUREDEF BLOQUE 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		ArrayList<Parametro> c = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<VarDef> e = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Metodo> f = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque g = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Metodo(b, c, d, e, f, g.getSentencias(), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNDEF",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMETERS ::= parIzquierda PARAMETERS_LIST parDerecha 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETERS ::= parIzquierda parDerecha 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETERS ::= 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETERS_LIST ::= PARAMETERS_LIST puntoycoma PARAMETER 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_LIST",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETERS_LIST ::= PARAMETER 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_LIST",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETER ::= ID_LIST dospuntos TYPE_SPECIFIER 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(false, a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETER",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETER ::= var_ ID_LIST dospuntos TYPE_SPECIFIER 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(true, b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETER",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PROCDEF ::= procedure_ id PARAMETERS puntoycoma VARDEF PROCEDUREDEF BLOQUE 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Parametro> c = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<VarDef> d = (ArrayList<VarDef>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Metodo> e = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque f = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Metodo(b, c, d, e, f.getSentencias(), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCDEF",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= begin_ SENTENCIAS end_ 
            {
              Bloque RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAST> b = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Bloque(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= begin_ end_ 
            {
              Bloque RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Bloque(null, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STATEMENT ::= BLOQUE puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque a = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENT ::= BLOQUE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque a = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATEMENT ::= SENTENCIA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              ArrayList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAST> a = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= SENTENCIA 
            {
              ArrayList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= WITH_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		WithDo a = (WithDo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= WITH_STMT 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		WithDo a = (WithDo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= ASSIGNMENT_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= BREAK_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= CONTINUE_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Continue a = (Continue)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= EXIT_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Exit a = (Exit)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= IF_STMT 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= CASE_STMT 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= CASE_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= WHILE_STMT 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= REPEAT_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Repeat a = (Repeat)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= FOR_STMT 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		For a = (For)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= WRITE_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Write a = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= EXPRESSION_STMT puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WITH_STMT ::= with_ TARGET_LIST do_ SENTENCIAS end_ 
            {
              WithDo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAST> c = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new WithDo(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WITH_STMT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WITH_STMT ::= with_ TARGET_LIST do_ end_ 
            {
              WithDo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new WithDo(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WITH_STMT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TARGET_LIST ::= TARGET_LIST coma TARGET 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TARGET_LIST ::= TARGET 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TARGET ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TARGET ::= ATTRIBUTEREF 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TARGET ::= ACCESS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TARGET",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASSIGNMENT_STMT ::= TARGET asignacion EXPRESSION 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_STMT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BREAK_STMT ::= break_ 
            {
              Break RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_STMT",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTINUE_STMT ::= continue_ 
            {
              Continue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUE_STMT",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXIT_STMT ::= exit_ 
            {
              Exit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Exit(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXIT_STMT",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF_STMT ::= if_ EXPRESSION then_ STATEMENT else_ STATEMENT 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(b, c, d, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STMT",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF_STMT ::= if_ EXPRESSION then_ STATEMENT 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STMT",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASE_STMT ::= case_ EXPRESSION of_ CASE_LIST default_ dospuntos STATEMENT end_ 
            {
              Switch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Switch(b, c, d, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STMT",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASE_STMT ::= case_ EXPRESSION of_ CASE_LIST else_ dospuntos STATEMENT end_ 
            {
              Switch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Switch(b, c, d, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STMT",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CASE_STMT ::= case_ EXPRESSION of_ CASE_LIST end_ 
            {
              Switch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Switch(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STMT",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASE_LIST ::= CASE_LIST CASE 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Case> a = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_LIST",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASE_LIST ::= CASE 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_LIST",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE ::= EXPRESSION_LIST dospuntos STATEMENT 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WHILE_STMT ::= while_ EXPRESSION do_ STATEMENT 
            {
              While RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new While(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // REPEAT_STMT ::= repeat_ SENTENCIAS until_ EXPRESSION 
            {
              Repeat RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<NodoAST> b = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Repeat(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEAT_STMT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FOR_STMT ::= for_ TARGET asignacion EXPRESSION to_ EXPRESSION do_ STATEMENT 
            {
              For RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST f = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new For(new Asignacion(b, d, cleft, cright), e, false, f, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FOR_STMT ::= for_ TARGET asignacion EXPRESSION downto_ EXPRESSION do_ STATEMENT 
            {
              For RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST f = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new For(new Asignacion(b, d, cleft, cright), e, true, f, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WRITE_STMT ::= write_ parIzquierda EXPRESSION_LIST parDerecha 
            {
              Write RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Write(false, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_STMT",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // WRITE_STMT ::= writeln_ parIzquierda EXPRESSION_LIST parDerecha 
            {
              Write RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Write(true, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_STMT",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESSION_STMT ::= CALL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_STMT",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESSION_STMT ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Call(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_STMT",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESSION_LIST ::= EXPRESSION_LIST coma EXPRESSION 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESSION_LIST ::= EXPRESSION 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESSION ::= OR_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OR_EXPR ::= NANDNOR_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OR_EXPR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OR_EXPR ::= OR_EXPR or NANDNOR_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, c, Operador.OR, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OR_EXPR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NANDNOR_EXPR ::= AND_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NANDNOR_EXPR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NANDNOR_EXPR ::= NANDNOR_EXPR nand AND_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, c, Operador.NAND, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NANDNOR_EXPR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NANDNOR_EXPR ::= NANDNOR_EXPR nor AND_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, c, Operador.NOR, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NANDNOR_EXPR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AND_EXPR ::= COMPARISON_EQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("AND_EXPR",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AND_EXPR ::= AND_EXPR and COMPARISON_EQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, c, Operador.AND, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("AND_EXPR",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARISON_EQ ::= COMPARISON 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON_EQ",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMPARISON_EQ ::= COMPARISON_EQ igual COMPARISON 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, c, Operador.IGUAL, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON_EQ",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COMPARISON_EQ ::= COMPARISON_EQ diferente COMPARISON 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, c, Operador.DIFERENTE, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON_EQ",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COMPARISON ::= A_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMPARISON ::= COMPARISON COMP_OPERATOR A_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operador b = (Operador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, c, b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // COMP_OPERATOR ::= mayorque 
            {
              Operador RESULT =null;
		 RESULT = Operador.MAYOR; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // COMP_OPERATOR ::= menorque 
            {
              Operador RESULT =null;
		 RESULT = Operador.MENOR; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // COMP_OPERATOR ::= mayorigual 
            {
              Operador RESULT =null;
		 RESULT = Operador.MAYORIGUAL; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // COMP_OPERATOR ::= menorigual 
            {
              Operador RESULT =null;
		 RESULT = Operador.MENORIGUAL; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMP_OPERATOR",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // A_EXPR ::= M_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A_EXPR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // A_EXPR ::= A_EXPR mas M_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, c, Operador.SUMA, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A_EXPR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // A_EXPR ::= A_EXPR menos M_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, c, Operador.RESTA, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A_EXPR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // M_EXPR ::= U_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // M_EXPR ::= M_EXPR asterisco U_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, c, Operador.MULTIPLICACION, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // M_EXPR ::= M_EXPR diagonal U_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, c, Operador.DIVISION, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // M_EXPR ::= M_EXPR modulo U_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, c, Operador.MODULO, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // M_EXPR ::= M_EXPR potencia U_EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, c, Operador.POTENCIA, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M_EXPR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // U_EXPR ::= PRIMARY 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // U_EXPR ::= mas PRIMARY 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Unario(a,Operador.SUMA, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // U_EXPR ::= menos PRIMARY 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Unario(a, Operador.RESTA, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // U_EXPR ::= not PRIMARY 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Unario(a, Operador.NOT, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("U_EXPR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PRIMARY ::= ATOM 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PRIMARY ::= ATTRIBUTEREF 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PRIMARY ::= ACCESS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PRIMARY ::= CALL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMARY",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ATOM ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATOM",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ATOM ::= LITERAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATOM",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ATOM ::= ENCLOSURE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATOM",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LITERAL ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.STRING), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LITERAL ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.CHAR), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LITERAL ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.INTEGER), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LITERAL ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.REAL), a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LITERAL ::= nil_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.NIL), null, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LITERAL ::= true_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.BOOLEAN), 1, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LITERAL ::= false_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Type.BOOLEAN), 0, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ENCLOSURE ::= PARENTH_FORM 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCLOSURE",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PARENTH_FORM ::= parIzquierda EXPRESSION parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARENTH_FORM",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ATTRIBUTEREF ::= PRIMARY punto id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Atributo(a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATTRIBUTEREF",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ACCESS ::= PRIMARY corcheteIzquierda EXPRESSION_LIST corcheteDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> c = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Acceso(a, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESS",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CALL ::= id parIzquierda parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Call(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CALL ::= id parIzquierda EXPRESSION_LIST parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT =  new Call(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
